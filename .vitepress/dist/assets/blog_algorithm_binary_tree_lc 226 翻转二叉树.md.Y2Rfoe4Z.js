import{_ as s,D as i,C as a,am as n}from"./chunks/framework.BDOtvRbC.js";const y=JSON.parse('{"title":"lc 226 反转二叉树","description":"","frontmatter":{},"headers":[],"relativePath":"blog/algorithm/binary_tree/lc 226 翻转二叉树.md","filePath":"blog/algorithm/binary_tree/lc 226 翻转二叉树.md"}'),t={name:"blog/algorithm/binary_tree/lc 226 翻转二叉树.md"},l=n(`<h1 id="lc-226-反转二叉树" tabindex="-1">lc 226 反转二叉树 <a class="header-anchor" href="#lc-226-反转二叉树" aria-label="Permalink to &quot;lc 226 反转二叉树&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">LeetCode 226</p><p><a href="https://leetcode.cn/problems/invert-binary-tree/" target="_blank" rel="noreferrer">https://leetcode.cn/problems/invert-binary-tree/</a></p></div><p>给你一棵二叉树的根节点 root，翻转这棵二叉树，并返回其根节点。</p><h2 id="递归" tabindex="-1">递归 <a class="header-anchor" href="#递归" aria-label="Permalink to &quot;递归&quot;">​</a></h2><p>这道题并不难，算是二叉树的入门题。递归的思路很简单，就是交换左右子树，然后递归的交换左右子树。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> invertTree</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">root</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;"> TreeNode</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> |</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">)</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;"> TreeNode</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> |</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (root </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">===</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    }</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">    invertTree</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(root.left);</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">    invertTree</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(root.right);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> temp </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> root.left;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    root.left </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> root.right;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    root.right </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> temp;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> root;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span></code></pre></div><p>这是后序遍历的思路，也可以用前序遍历的思路，先交换左右子树，然后递归的交换左右子树。</p><p>但是要注意，中序遍历的思路是不行的，因为中序遍历的顺序是左根右，如果先交换左右子树，再递归的交换左右子树，就会出现错误。</p><h2 id="迭代" tabindex="-1">迭代 <a class="header-anchor" href="#迭代" aria-label="Permalink to &quot;迭代&quot;">​</a></h2><p>迭代的思路就是用栈来模拟递归的过程，先交换左右子树，然后递归的交换左右子树。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> invertTree</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">root</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;"> TreeNode</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> |</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">)</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;"> TreeNode</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> |</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (root </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">===</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    }</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> stack </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> [root];</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    while</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (stack.length) {</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> node </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> stack.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">pop</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">()</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">!</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> temp </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> node.left;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        node.left </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> node.right;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        node.right </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> temp;</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (node.left </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">!==</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">            stack.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">push</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(node.left);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        }</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (node.right </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">!==</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">            stack.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">push</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(node.right);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        }</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    }</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> root;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span></code></pre></div>`,11),h=[l];function F(k,e,p,r,d,o){return a(),i("div",null,h)}const c=s(t,[["render",F]]);export{y as __pageData,c as default};
