import{_ as e,c as o,o as a,al as t}from"./chunks/framework.tb-jXbfw.js";const m=JSON.parse('{"title":"Docker 基本概念","description":"","frontmatter":{},"headers":[],"relativePath":"blog/container/docker/Docker 基本概念.md","filePath":"blog/container/docker/Docker 基本概念.md"}'),r={name:"blog/container/docker/Docker 基本概念.md"},c=t('<h1 id="docker-基本概念" tabindex="-1">Docker 基本概念 <a class="header-anchor" href="#docker-基本概念" aria-label="Permalink to &quot;Docker 基本概念&quot;">​</a></h1><h2 id="容器和镜像" tabindex="-1">容器和镜像 <a class="header-anchor" href="#容器和镜像" aria-label="Permalink to &quot;容器和镜像&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>什么是容器：<a href="https://docs.docker.com/guides/walkthroughs/what-is-a-container/" target="_blank" rel="noreferrer">https://docs.docker.com/guides/walkthroughs/what-is-a-container/</a></p></div><p>容器提供了一个独立、隔离的运行环境，代码能不受宿主操作系统或文件的影响而独立运行。 镜像是一个只读的模板（理解为类），容器是一个运行时的实例（理解为对象）。</p><p>当我们利用 Docker 安装应用时，Docker 会自动搜索并下载应用镜像 <code>image</code>。镜像不仅包含应用本身，还包含应用运行所需要的环境、配置、系统函数库。Docker 会在运行镜像时创建一个隔离环境，称为容器 <code>container</code>。</p>',5),s=[c];function n(i,d,_,l,h,k){return a(),o("div",null,s)}const u=e(r,[["render",n]]);export{m as __pageData,u as default};
