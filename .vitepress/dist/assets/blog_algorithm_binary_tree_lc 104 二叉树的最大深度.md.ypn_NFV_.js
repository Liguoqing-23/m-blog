import{_ as i,c as s,o as a,al as t}from"./chunks/framework.tb-jXbfw.js";const g=JSON.parse('{"title":"lc 104 二叉树的最大深度","description":"","frontmatter":{},"headers":[],"relativePath":"blog/algorithm/binary_tree/lc 104 二叉树的最大深度.md","filePath":"blog/algorithm/binary_tree/lc 104 二叉树的最大深度.md"}'),n={name:"blog/algorithm/binary_tree/lc 104 二叉树的最大深度.md"},l=t(`<h1 id="lc-104-二叉树的最大深度" tabindex="-1">lc 104 二叉树的最大深度 <a class="header-anchor" href="#lc-104-二叉树的最大深度" aria-label="Permalink to &quot;lc 104 二叉树的最大深度&quot;">​</a></h1><p>给定一个二叉树 root，返回其最大深度。</p><p>二叉树的<strong>最大深度</strong>是指从根节点到最远叶子节点的最长路径上的节点数。</p><p>根节点的高度就是树的最大深度。</p><h2 id="递归" tabindex="-1">递归 <a class="header-anchor" href="#递归" aria-label="Permalink to &quot;递归&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> maxDepth</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">root</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;"> TreeNode</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> |</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">)</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> number</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (root </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">===</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> 0</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    }</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> Math.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">max</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">maxDepth</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(root.left), </span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">maxDepth</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(root.right)) </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">+</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> 1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span></code></pre></div>`,6),h=[l];function e(k,F,p,r,o,d){return a(),s("div",null,h)}const y=i(n,[["render",e]]);export{g as __pageData,y as default};
