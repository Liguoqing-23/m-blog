import{_ as s,D as i,C as a,am as n}from"./chunks/framework.BDOtvRbC.js";const y=JSON.parse('{"title":"令我好友无比困惑的 this","description":"","frontmatter":{},"headers":[],"relativePath":"blog/dev_lang/javascript/令我好友无比困惑的 this.md","filePath":"blog/dev_lang/javascript/令我好友无比困惑的 this.md"}'),F={name:"blog/dev_lang/javascript/令我好友无比困惑的 this.md"},l=n(`<h1 id="令我好友无比困惑的-this" tabindex="-1">令我好友无比困惑的 this <a class="header-anchor" href="#令我好友无比困惑的-this" aria-label="Permalink to &quot;令我好友无比困惑的 this&quot;">​</a></h1><p>每回我学 Java 的好友（没怎么学过 JS）看到我写 JS，就会发出感叹：“this 不是这么使的！”</p><p>Java 中的 this 是什么，我大可不必在这里详说。我也学过 Java，我也确实理解他的困惑，我也确实每回都解释的不清不楚，甚至压根就不解释了。这反倒让我自己越来越困惑，为什么我学 JS 很顺的就学下来了，没感到 this 有什么问题，反倒是没学过的人如此不能理解呢？（似乎是个废话）总之我发现，我自己也没搞懂 this 到底是什么，我只是知道怎么用而已。既然以后无论面试还是深入下去都会遇到这个问题，不妨就搞懂他罢了。</p><h2 id="this-到底指向什么" tabindex="-1">this 到底指向什么 <a class="header-anchor" href="#this-到底指向什么" aria-label="Permalink to &quot;this 到底指向什么&quot;">​</a></h2><p>先来跑一段代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> { foo };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// obj</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> bar </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj.foo; </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// 隐式绑定丢失</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">bar</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span></code></pre></div><p>这是一个令人困惑的结果，三次调用 <code>foo</code>，结果输出却不尽相同。</p><p>实际上，this 的指向实在运行时确定的，this 的绑定和调用方式以及调用的位置有关，但和声明的位置无关。</p><h3 id="默认绑定" tabindex="-1">默认绑定 <a class="header-anchor" href="#默认绑定" aria-label="Permalink to &quot;默认绑定&quot;">​</a></h3><p>JS 给 this 绑定值有四种规则，首先是默认绑定。默认绑定是最常见的绑定规则，当函数调用时，this 绑定到全局对象。在浏览器中，全局对象是 window。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> { foo };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> bar </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj.foo;</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">bar</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> baz</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">fn</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">    fn</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">baz</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(foo); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span></code></pre></div><p>这几种调用方法都有一个共性，就是 <code>foo</code> 是被作为独立函数调用的。只要是作为独立函数调用就会指向 window 或者 undefined。</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>严格模式下，全局对象不会被默认绑定，this 会绑定到 undefined。</p></div><h3 id="隐式绑定" tabindex="-1">隐式绑定 <a class="header-anchor" href="#隐式绑定" aria-label="Permalink to &quot;隐式绑定&quot;">​</a></h3><p>通过对象属性引用调用函数，this 绑定到这个对象。也就是说，对象属性引用链中的最后一层是调用位置时，this 绑定到这个对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">    foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    },</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// obj</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> bar </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj.foo;</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">bar</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span></code></pre></div><p><code>foo</code> 执行时通过 <code>obj</code> 引用，所以 this 绑定到 <code>obj</code>。而 <code>bar</code> 是作为独立函数调用的，所以 this 绑定到 window。</p><h3 id="显式绑定" tabindex="-1">显式绑定 <a class="header-anchor" href="#显式绑定" aria-label="Permalink to &quot;显式绑定&quot;">​</a></h3><p>显示绑定就是通过 JS 提供的 <code>call</code>、<code>apply</code>、<code>bind</code> 方法来绑定 this。</p><p>现在我不想通过给 <code>obj</code> 添加 <code>foo</code> 方法来调用 <code>foo</code>，这样就必须在 <code>obj</code> 上添加一个属性。我可以通过 <code>call</code> 或 <code>apply</code> 来绑定 this：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj1 </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> { name: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;obj1&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> };</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj2 </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> { name: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;obj2&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">foo.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(obj1); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// obj1</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">foo.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">apply</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(obj2); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// obj2</span></span></code></pre></div><h3 id="new-绑定" tabindex="-1">new 绑定 <a class="header-anchor" href="#new-绑定" aria-label="Permalink to &quot;new 绑定&quot;">​</a></h3><p>JS 中的函数可以通过 <code>new</code> 关键字来调用，这种调用方式被称为构造函数调用。使用 <code>new</code> 来构造调用一个函数时，会执行如下操作：</p><ul><li>创建一个新对象</li><li>这个新对象会被执行 <code>[[Prototype]]</code> 连接</li><li>这个新对象会绑定到函数调用的 this</li><li>如果函数没有返回其他对象，那么这个新对象会被返回</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> new</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// foo</span></span></code></pre></div><p>明白了 JS 构造函数的执行过程，可以试着手写一个 new：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> new_operator</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">ctor</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">...</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">typeof</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> ctor </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">!==</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;"> &quot;function&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        throw</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> new</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> TypeError</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;ctor must be a function&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> Object.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">create</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">ctor</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">.prototype);</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> result </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> ctor.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">apply</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(obj, args);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> result </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">instanceof</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;"> Object</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> ?</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> result </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">    this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">.name </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;"> &quot;foo&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> new_operator</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(foo);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(obj.name); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// foo</span></span></code></pre></div><h2 id="this-绑定的优先级" tabindex="-1">this 绑定的优先级 <a class="header-anchor" href="#this-绑定的优先级" aria-label="Permalink to &quot;this 绑定的优先级&quot;">​</a></h2><p>默认绑定的优先级是最低的。任何通过其他方式绑定的 this 都会取缔默认绑定。</p><p>显示绑定的优先级高于隐式绑定。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> { foo };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// obj</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.foo.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">apply</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">({}); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// {}</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.foo.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">({}); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// {}</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.foo.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">bind</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">({})(); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// {}</span></span></code></pre></div><p>new 绑定的优先级高于隐式绑定。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">.a);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    a: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">2</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">,</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    foo: foo,</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">};</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">new</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// {} undefined</span></span></code></pre></div><p>new 无法和 <code>apply</code>、<code>call</code> 一起使用，没有可比性。但是可以和 <code>bind</code> 一起使用，且 <code>new</code> 的优先级高于 <code>bind</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">.a);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    a: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">2</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">,</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    foo: foo,</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">};</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> bar </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> new</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (obj.foo.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">bind</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(obj))(); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// {} undefined</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ol><li><code>new</code> 居于首位</li><li><code>bind</code>、<code>apply</code>、<code>call</code> 次之 <ul><li>显示绑定中 <code>bind</code> 优先级最高</li></ul></li><li>隐式绑定再次之</li><li>默认绑定最低</li></ol><h2 id="跳出绑定之外-不在规则之中" tabindex="-1">跳出绑定之外，不在规则之中 <a class="header-anchor" href="#跳出绑定之外-不在规则之中" aria-label="Permalink to &quot;跳出绑定之外，不在规则之中&quot;">​</a></h2><h3 id="忽略显示绑定" tabindex="-1">忽略显示绑定 <a class="header-anchor" href="#忽略显示绑定" aria-label="Permalink to &quot;忽略显示绑定&quot;">​</a></h3><p>有些语法特性会打破绑定规则，把 <code>null</code> 或 <code>undefined</code> 作为 <code>this</code> 的绑定对象传入 <code>apply</code>、<code>call</code>、<code>bind</code>，会被忽略，而是应用默认绑定规则。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">foo.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">apply</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">foo.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">undefined</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">foo.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">bind</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">)(); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span></code></pre></div><p>常见于 <code>apply</code> 展开数组：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, a, b);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> arr </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> [</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">2</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">];</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">foo.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">apply</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, arr); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window 1 2</span></span></code></pre></div><p>常见于 <code>bind</code> 实现柯里化：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, a, b);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {};</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> bar </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> foo.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">bind</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">bar</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">2</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window 1 2</span></span></code></pre></div><p>像这样传入 <code>null</code> 有时候时不安全的，更安全的做法是通过 <code>Object.create(null)</code> 创建一个空对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">foo.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">apply</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(Object.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">create</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">));</span></span></code></pre></div><h3 id="间接函数引用" tabindex="-1">间接函数引用 <a class="header-anchor" href="#间接函数引用" aria-label="Permalink to &quot;间接函数引用&quot;">​</a></h3><p>当创建了一个函数的间接引用时，会丢失绑定。</p><p>形如 <code>a.foo = b.foo</code>，返回值是 <code>b.foo</code> 函数的引用。因此调用位置是 <code>foo</code>，而不是 <code>a</code> 或 <code>b</code>。</p><p>很怪的写法，没什么用，实际开发也不会这样写。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> a </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> { a: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;a&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, foo };</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> b </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> { b: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;b&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">a.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// a</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(b.foo </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> a.foo)(); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// undefined</span></span></code></pre></div><h3 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-label="Permalink to &quot;箭头函数&quot;">​</a></h3><p>箭头函数是 ES6 增加的一种编写函数的方法，比起函数表达式更加简洁。箭头函数是根据外层（函数或全局）作用域（词法作用域）来决定 <code>this</code> 的值，而箭头函数本身不会绑定 <code>this</code> 和 <code>arguments</code>。因为箭头函数没有原型，所以也不能被构造。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">=&gt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">        // this 从 foo 继承</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {};</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> bar </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> foo.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(obj);</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">bar</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// obj</span></span></code></pre></div><h2 id="this-的查找规则" tabindex="-1">this 的查找规则 <a class="header-anchor" href="#this-的查找规则" aria-label="Permalink to &quot;this 的查找规则&quot;">​</a></h2><p><code>this</code> 是一层一层向上查找的，直到找到绑定的对象或者到达全局对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">    foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">: () </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">=&gt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        const</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> bar</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> =</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">=&gt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">            console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        };</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">        bar</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    },</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span></code></pre></div><p>箭头函数没有 <code>this</code> 反倒是好事，比如网络请求时，可以直接使用外层的 <code>this</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// 网络请求工具函数</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> request</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">url</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">callback</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    let</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> data </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {};</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">    callback</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(data);</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// 组件</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> component </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    data: [],</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">    init</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">        request</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;xxx&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">=&gt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">            this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">.data </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> data; </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// this 指向 component</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        });</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    },</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">};</span></span></code></pre></div><h2 id="练习" tabindex="-1">练习 <a class="header-anchor" href="#练习" aria-label="Permalink to &quot;练习&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-3UYnY" id="tab-ztveUXp" checked="checked"><label for="tab-ztveUXp">第一题</label><input type="radio" name="group-3UYnY" id="tab-DRiKjih"><label for="tab-DRiKjih">第二题</label><input type="radio" name="group-3UYnY" id="tab-TpciuMv"><label for="tab-TpciuMv">第三题</label><input type="radio" name="group-3UYnY" id="tab-aFYTi7d"><label for="tab-aFYTi7d">第四题</label><input type="radio" name="group-3UYnY" id="tab-VlHrxkJ"><label for="tab-VlHrxkJ">第五题</label></div><div class="blocks"><div class="language-javascript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">    get_this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    },</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> get_this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> get </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj.get_this;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">    get</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">get_this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    (_get </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj.get_this)();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">get_this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// obj</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">    get_this_1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    },</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">    get_this_2</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">: () </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">=&gt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    },</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">    get_this_3</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">            console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    },</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">    get_this_4</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">=&gt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">            console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    },</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">get_this_1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">get_this_2</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">get_this_3</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">()();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">get_this_4</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">()();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.get_this_1.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;foo&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.get_this_2.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;foo&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">get_this_3</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">().</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;foo&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">get_this_4</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">().</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;foo&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> get_this_1 </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj.get_this_1;</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> get_this_2 </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj.get_this_2;</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> get_this_3 </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">get_this_3</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> get_this_4 </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">get_this_4</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">get_this_1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">get_this_2</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">get_this_3</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">get_this_4</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// obj</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// obj</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// String { &quot;foo&quot; }</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// String { &quot;foo&quot; }</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// obj</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// obj</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">    this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo1</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> =</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    };</span></span>
<span class="line"><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">    this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo2</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> =</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">=&gt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    };</span></span>
<span class="line"><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">    this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo3</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> =</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">            console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    };</span></span>
<span class="line"><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">    this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo4</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> =</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">=&gt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">            console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> new</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.foo1.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;foo&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo2</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.foo2.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;foo&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo3</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">()();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo3</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">().</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;foo&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.foo3.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;foo&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">)();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo4</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">()();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo4</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">().</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;foo&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.foo4.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;foo&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">)();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// obj</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// String { &quot;foo&quot; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// obj</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// obj</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// String { &quot;foo&quot; }</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// obj</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// obj</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// String { &quot;foo&quot; }</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">    this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">.obj </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">        foo1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">: </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">            return</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">                console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">            };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        },</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">        foo2</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">: </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">            return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">=&gt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">                console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">            };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        },</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> o </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> new</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">o.obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">()();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">o.obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">().</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;foo&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">o.obj.foo1.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;foo&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">)();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">o.obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo2</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">()();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">o.obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo2</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">().</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;foo&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">o.obj.foo2.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;foo&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">)();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// String { &quot;foo&quot; }</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// obj</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// obj</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// String { &quot;foo&quot; }</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">var</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> obj </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">    foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">: </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        (</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">            console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        })();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    },</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">obj.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// window</span></span></code></pre></div></div></div>`,62),h=[l];function t(k,p,e,d,r,o){return a(),i("div",null,h)}const c=s(F,[["render",t]]);export{y as __pageData,c as default};
