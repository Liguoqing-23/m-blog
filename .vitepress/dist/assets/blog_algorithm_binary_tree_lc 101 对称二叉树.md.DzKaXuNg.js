import{_ as l,D as h,a4 as i,am as a,$ as s,C as F}from"./chunks/framework.BDOtvRbC.js";const u=JSON.parse('{"title":"lc 101 对称二叉树","description":"","frontmatter":{},"headers":[],"relativePath":"blog/algorithm/binary_tree/lc 101 对称二叉树.md","filePath":"blog/algorithm/binary_tree/lc 101 对称二叉树.md"}'),k={name:"blog/algorithm/binary_tree/lc 101 对称二叉树.md"},p=a('<h1 id="lc-101-对称二叉树" tabindex="-1">lc 101 对称二叉树 <a class="header-anchor" href="#lc-101-对称二叉树" aria-label="Permalink to &quot;lc 101 对称二叉树&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">LeetCode 101</p><p><a href="https://leetcode.cn/problems/symmetric-tree/" target="_blank" rel="noreferrer">https://leetcode.cn/problems/symmetric-tree/</a></p></div><p>给你一棵二叉树的根节点 root，翻转这棵二叉树，并返回其根节点。</p><h2 id="递归" tabindex="-1">递归 <a class="header-anchor" href="#递归" aria-label="Permalink to &quot;递归&quot;">​</a></h2><p>无论递归还是迭代，对于这道题来说都是一样的。</p><p>思路在于，判断左右子树是否对称，如果用递归，递归入口需要传入左右子树两项，返回值既要判断左右子树的值是否相等，还要判断左右子树是否存在。</p>',6),e=a(`<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> isSymmetric</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">root</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;"> TreeNode</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> |</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">)</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> boolean</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (root </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">===</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> true</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    }</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    const</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> isMirror</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> =</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span></span>
<span class="line"><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        left</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;"> TreeNode</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> |</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">,</span></span>
<span class="line"><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        right</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;"> TreeNode</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> |</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> null</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    )</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> boolean</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> =&gt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (left </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">===</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> &amp;&amp;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> right </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">===</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">            return</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> true</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        }</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (left </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">===</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> ||</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> right </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">===</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">            return</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> false</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        }</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">            left.val </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">===</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> right.val </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">&amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">            isMirror</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(left.left, right.right) </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">&amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">            isMirror</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(left.right, right.left)</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        );</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    };</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> isMirror</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(root.left, root.right);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span></code></pre></div><h2 id="迭代" tabindex="-1">迭代 <a class="header-anchor" href="#迭代" aria-label="Permalink to &quot;迭代&quot;">​</a></h2><p>迭代的思路是，用队列存储左右子树，每次取出两个节点，判断是否对称，然后将左右子树按照对称的顺序存入队列。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> isSymmetric</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">root</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;"> TreeNode</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> |</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">)</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> boolean</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (root </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">===</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> true</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> queue </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> [root.left, root.right];</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    while</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (queue.length) {</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> left </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> queue.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">shift</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">()</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">!</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> right </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> queue.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">shift</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">()</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">!</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (left </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">===</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> &amp;&amp;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> right </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">===</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">            continue</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        }</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (left </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">===</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> ||</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> right </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">===</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">            return</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> false</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        }</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (left.val </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">!==</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> right.val) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">            return</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> false</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        }</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        queue.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">push</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(left.left, right.right, left.right, right.left);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    }</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> true</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span></code></pre></div>`,4);function r(d,g,y,o,c,E){const n=s("auto-dark"),t=s("show-image");return F(),h("div",null,[p,i(n),i(t,{src:"/img/lc 101 对称二叉树-1.png"}),e])}const A=l(k,[["render",r]]);export{u as __pageData,A as default};
