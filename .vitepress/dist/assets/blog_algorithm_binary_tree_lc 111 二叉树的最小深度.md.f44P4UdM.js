import{_ as i,c as s,o as a,al as t}from"./chunks/framework.tb-jXbfw.js";const g=JSON.parse('{"title":"lc 111 二叉树的最小深度","description":"","frontmatter":{},"headers":[],"relativePath":"blog/algorithm/binary_tree/lc 111 二叉树的最小深度.md","filePath":"blog/algorithm/binary_tree/lc 111 二叉树的最小深度.md"}'),n={name:"blog/algorithm/binary_tree/lc 111 二叉树的最小深度.md"},l=t(`<h1 id="lc-111-二叉树的最小深度" tabindex="-1">lc 111 二叉树的最小深度 <a class="header-anchor" href="#lc-111-二叉树的最小深度" aria-label="Permalink to &quot;lc 111 二叉树的最小深度&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">LeetCode 111</p><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/description/" target="_blank" rel="noreferrer">https://leetcode.cn/problems/minimum-depth-of-binary-tree/description/</a></p></div><p>给定一个二叉树，找出其最小深度。最小深度是从根节点到最近叶子节点的最短路径上的节点数量。说明：叶子节点是指没有子节点的节点。</p><h2 id="递归" tabindex="-1">递归 <a class="header-anchor" href="#递归" aria-label="Permalink to &quot;递归&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> minDepth</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">root</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;"> TreeNode</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> |</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">)</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> number</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (root </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">===</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> 0</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> left </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> minDepth</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(root.left),</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        right </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> minDepth</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(root.right);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">!</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">left </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">||</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> !</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">right) </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> Math.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">max</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(left, right) </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">+</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> 1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> Math.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">min</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(left, right) </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">+</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> 1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span></code></pre></div>`,5),h=[l];function e(F,k,p,r,d,o){return a(),s("div",null,h)}const y=i(n,[["render",e]]);export{g as __pageData,y as default};
