import{_ as s,c as i,o as a,al as n}from"./chunks/framework.tb-jXbfw.js";const y=JSON.parse('{"title":"axios 拦截器","description":"","frontmatter":{},"headers":[],"relativePath":"blog/network/axios/axios 拦截器.md","filePath":"blog/network/axios/axios 拦截器.md"}'),t={name:"blog/network/axios/axios 拦截器.md"},l=n(`<h1 id="axios-拦截器" tabindex="-1">axios 拦截器 <a class="header-anchor" href="#axios-拦截器" aria-label="Permalink to &quot;axios 拦截器&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">axios github</p><p><a href="https://github.com/axios/axios?tab=readme-ov-file#interceptors" target="_blank" rel="noreferrer">https://github.com/axios/axios?tab=readme-ov-file#interceptors</a></p></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// 设置请求拦截器</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">axios.interceptors.request.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">use</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">config</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">        // 在发送请求之前做些什么</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> config;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    },</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">error</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">        // 对请求错误做些什么</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> Promise</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">reject</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(error);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    }</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// 设置响应拦截器</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">axios.interceptors.response.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">use</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">response</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">        // 对响应数据做点什么</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">        // 2xx 都会进入这里</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> response;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    },</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">error</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">        // 对响应错误做点什么</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">        // 除了 2xx 都会进入这里</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> Promise</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">reject</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(error);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    }</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// 移除请求拦截器</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> myInterceptor </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> axios.interceptors.request.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">use</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">    /*...*/</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">});</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">axios.interceptors.request.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">eject</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(myInterceptor);</span></span></code></pre></div><p>请求拦截器是后添加的先执行，响应拦截器是先添加的先执行。</p><p>由于响应体中的数据默认 axios 返回的结果，我们在后端返回的数据被包装在了 data 字段中，多数情况下我们只需要 data 字段中的数据，所以我们可以在响应拦截器中对返回的数据进行处理，只返回 data 字段中的数据。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">axios.interceptors.response.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">use</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">response</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> response.data; </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// 只返回 data 字段中的数据</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    },</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">error</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> Promise</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">reject</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(error);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    }</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span></code></pre></div>`,6),F=[l];function h(k,p,e,r,o,c){return a(),i("div",null,F)}const g=s(t,[["render",h]]);export{y as __pageData,g as default};
