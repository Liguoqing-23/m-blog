import{_ as s,D as i,C as a,am as n}from"./chunks/framework.BDOtvRbC.js";const o=JSON.parse('{"title":"闭包原理","description":"","frontmatter":{},"headers":[],"relativePath":"blog/dev_lang/javascript/闭包原理.md","filePath":"blog/dev_lang/javascript/闭包原理.md"}'),t={name:"blog/dev_lang/javascript/闭包原理.md"},l=n(`<h1 id="闭包原理" tabindex="-1">闭包原理 <a class="header-anchor" href="#闭包原理" aria-label="Permalink to &quot;闭包原理&quot;">​</a></h1><h2 id="关于作用域链" tabindex="-1">关于作用域链 <a class="header-anchor" href="#关于作用域链" aria-label="Permalink to &quot;关于作用域链&quot;">​</a></h2><h3 id="词法作用域" tabindex="-1">词法作用域 <a class="header-anchor" href="#词法作用域" aria-label="Permalink to &quot;词法作用域&quot;">​</a></h3><p>作用域是程序源代码中定于的范围，分为全局作用域和局部作用域（函数作用域）。作用域规定了如何定义变量，以及如何查找变量，即确定当前执行代码对变量的访问权限。</p><p>函数作用域采用了此法作用域，即静态作用域。词法作用域是指在词法分析阶段确定变量的作用域，也就是说在编译阶段就确定了变量的作用域。意思就是<strong>变量在函数定义的时候就已经确定了作用域，而不是在函数调用的时候确定作用域。</strong></p><p>举个例子：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">var</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> value </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> 1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> get_value</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(value);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> set_value</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    var</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> value </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> 2</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">    get_value</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">set_value</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// 1</span></span></code></pre></div><p>学过 C/C++ 或者 Java 等语言看这段代码会觉得奇怪，<code>set_value</code> 函数中定义了一个局部变量 value，然后调用 get_value 函数，按照 C/C++ 或者 Java 的作用域规则，应该是输出 <code>2</code>。但是 JavaScript 的作用域规则是词法作用域，所以输出的是 <code>1</code>。</p><h3 id="变量对象" tabindex="-1">变量对象 <a class="header-anchor" href="#变量对象" aria-label="Permalink to &quot;变量对象&quot;">​</a></h3><blockquote><p><a href="https://tsejx.github.io/javascript-guidebook/core-modules/executable-code-and-execution-contexts/execution/variable-object/" target="_blank" rel="noreferrer">JavaScript Guidebook</a></p><p><a href="https://doc.yonyoucloud.com/doc/wiki/project/javascript-depth-understanding/variable-object.html" target="_blank" rel="noreferrer">深入理解 JavaScript</a></p></blockquote><ul><li>变量对象是与执行上下文相关的数据作用域，它存储了在上下文中定义的变量和函数声明。所有的变量（包括函数、形参）都会被存储在变量对象中。</li><li>变量对象在上下文被创建时被创建。当上下文被销毁时，变量对象也随之销毁。</li></ul><p>全局变量就是 Window 对象，可以通过 <code>this</code> 访问。同样 <code>arguments</code> 以及属性 <code>value</code> 也属于变量对象。这些都统称为 Variable Object。在未进入执行上下文之前，变量对象中的属性都是不可访问的。</p><p>进入执行阶段后，活动对象 Active Object 会被创建，其中的属性包括 VO、函数执行时传入的参数以及 <code>arguments</code> 都可访问。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">AO </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> VO </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">+</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> arameters</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> + </span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">arguments</span></span></code></pre></div><p>换种说法，AO 是 VO 的一个复制，包括 VO 的属性，以及函数执行时传入的参数和 <code>arguments</code> 对象。二者处于不同的生命周期，VO 在函数定义时创建，AO 在函数执行时创建。</p><p>总结一下：</p><ul><li>全局执行上下文的变量对象初始化是全局对象</li><li>函数执行上下文的变量对象初始化只包括 Arguments 对象</li><li>在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值</li><li>在代码执行阶段，会再次修改变量对象的属性值</li></ul><h3 id="作用域链" tabindex="-1">作用域链 <a class="header-anchor" href="#作用域链" aria-label="Permalink to &quot;作用域链&quot;">​</a></h3><p>在查找变量时，JS 会先从当前上下文的变量对象中查找，如果没找到，就会从父级（词法层面）上下文的变量对象中查找，直到找到全局上下文的变量对象。这种链式查找的规则就是作用域链。</p><p>函数有一个内部属性 <code>[[scope]]</code>，当函数创建时，就会保存所有父变量对象到其中。这个属性是在函数定义时就确定的，而不是在函数调用时确定的。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    var</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> a </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> 1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> bar</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        var</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> b </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> 2</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(a, b);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    }</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">    bar</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span></code></pre></div><p>函数各自的作用域链如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">foo.[[scope]] </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> [</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    globalContext.VO </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// 全局上下文变量对象</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">]</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">bar.[[scope]] </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> [</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    fooContext.AO, </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// foo 函数的活动对象</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    globalContext.VO </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// 全局上下文变量对象</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">]</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// 如果 foo 不执行，bar 也不会执行，因此 bar 的作用域链中包含了 foo 的活动对象</span></span></code></pre></div><p>当函数执行时，进入函数上下文，创建 VO / AO 后，就会将 AO 添加到作用域链的前端。这时候执行上下文的作用域链就称为 Scopes，作用域链至此创建完毕。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">Scopes </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> [AO].</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">concat</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">([[Scopes]]);</span></span></code></pre></div><p>作用域链的作用就是保证对执行上下文中的所有变量和函数的有序访问。即函数可以访问自己的作用域链中的变量对象，也可以访问父上下文的变量对象，但是不能访问子上下文的变量对象。</p><p>当函数执行完毕，其执行上下文会被销毁，此时其作用域链也会被销毁。</p><h2 id="闭包与作用域链" tabindex="-1">闭包与作用域链 <a class="header-anchor" href="#闭包与作用域链" aria-label="Permalink to &quot;闭包与作用域链&quot;">​</a></h2><h3 id="闭包的定义" tabindex="-1">闭包的定义 <a class="header-anchor" href="#闭包的定义" aria-label="Permalink to &quot;闭包的定义&quot;">​</a></h3><p>闭包是指有权访问另一个函数作用域中的变量的函数。闭包是一个函数，它可以访问自己的作用域链之外的变量。</p><p>从广义的角度来说，JS 中的函数都是闭包，因为它们都能访问自己的作用域链之外的变量。但是一般来说，只有访问了另一个函数作用域中的变量的函数才能称为闭包。</p><h3 id="闭包的原理" tabindex="-1">闭包的原理 <a class="header-anchor" href="#闭包的原理" aria-label="Permalink to &quot;闭包的原理&quot;">​</a></h3><p>闭包访问函数内部的变量，函数内部的变量对象被保存在了函数的作用域链中。当函数执行完毕，其执行上下文会被销毁，但是其作用域链不会被销毁，不会被垃圾回收机制处理，因此闭包可以访问函数内部的变量，这就是闭包的原理。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    let</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> value </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> 1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> bar</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(value);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> bar</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> baz </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">baz</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span></code></pre></div><p>上面的代码中，<code>foo</code> 函数执行完后销毁，作用域断裂，但是 <code>bar</code> 在定义时就保存了 <code>foo</code> 的作用域链，因此可以访问 <code>foo</code> 的变量，继而通过 <code>baz</code> 访问。</p><p>因此闭包的优点就在于让一个变量长期驻留在内存中，避免全局变量的污染，允许私有变量的存在。</p><h3 id="内存泄露问题" tabindex="-1">内存泄露问题 <a class="header-anchor" href="#内存泄露问题" aria-label="Permalink to &quot;内存泄露问题&quot;">​</a></h3><p>闭包不一定会导致内存泄露，只有内部函数被外部引用时才会导致内存泄露。这样说也不准确，应该说，被引用保存的函数在后续的代码中再也不会使用到，但引擎是不知道的，GC 也就不会清理这部分内存，这是才正则造成了内存泄漏。这也是闭包的缺点，常驻内存会增加内存消耗，不利于性能优化，使用不当会导致内存泄露。</p><p>当然释放内存也很简单，只需要将引用的函数赋值为 <code>null</code> 即可。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    let</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> value </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> 1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> bar</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(value);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> bar;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> baz </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">baz</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">();</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">baz </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">; </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// 释放内存</span></span></code></pre></div><h3 id="没有闭包的局限性" tabindex="-1">没有闭包的局限性 <a class="header-anchor" href="#没有闭包的局限性" aria-label="Permalink to &quot;没有闭包的局限性&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">const</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> name </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;"> &quot;global&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(name);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span></code></pre></div><p><code>foo</code> 中之所以能够直接访问 <code>name</code> 就是因为 <code>foo</code> 及其外部环境形成了闭包，如果没有闭包，，如 C++，就必须这样来写：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">const</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> char</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> *</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">name </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;"> &quot;global&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">void</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">const</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> char</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> *</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">name</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;"> // 将 name 作为参数传入</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    cout </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">&lt;&lt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> name </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">&lt;&lt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(name);</span></span></code></pre></div><h2 id="闭包的应用" tabindex="-1">闭包的应用 <a class="header-anchor" href="#闭包的应用" aria-label="Permalink to &quot;闭包的应用&quot;">​</a></h2><h3 id="回调函数" tabindex="-1">回调函数 <a class="header-anchor" href="#回调函数" aria-label="Permalink to &quot;回调函数&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> wait</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">message</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">    setTimeout</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> timer</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(message);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    }, </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">1000</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span></code></pre></div><h3 id="防抖" tabindex="-1">防抖 <a class="header-anchor" href="#防抖" aria-label="Permalink to &quot;防抖&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> debounce</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">fn</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">delay</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    let</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> timer </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (timer) {</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">            clearTimeout</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(timer);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        }</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        timer </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> setTimeout</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(() </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">=&gt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">            fn.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">apply</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">arguments</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        }, delay);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span></code></pre></div><h3 id="节流" tabindex="-1">节流 <a class="header-anchor" href="#节流" aria-label="Permalink to &quot;节流&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> throttle</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">fn</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">delay</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    let</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> timer </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">!</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">timer) {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">            timer </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> setTimeout</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(() </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">=&gt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">                fn.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">apply</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">arguments</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">                timer </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">            }, delay);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        }</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span></code></pre></div><h3 id="js-bind-方法" tabindex="-1">js bind 方法 <a class="header-anchor" href="#js-bind-方法" aria-label="Permalink to &quot;js bind 方法&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">Function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">.prototype.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">bind</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> =</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">context</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    var</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> self </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;"> this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> self.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">apply</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(context, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">arguments</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">};</span></span></code></pre></div><h3 id="单例模式" tabindex="-1">单例模式 <a class="header-anchor" href="#单例模式" aria-label="Permalink to &quot;单例模式&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> Singleton</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">() {</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    var</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> instance;</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">!</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">instance) {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">            instance </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;"> this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        }</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> instance;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span></code></pre></div><h3 id="定时器传参" tabindex="-1">定时器传参 <a class="header-anchor" href="#定时器传参" aria-label="Permalink to &quot;定时器传参&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(value);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">setTimeout</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">foo</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">), </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">1000</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span></code></pre></div><h3 id="模块化-iife-立即调用函数表达式" tabindex="-1">模块化 IIFE 立即调用函数表达式 <a class="header-anchor" href="#模块化-iife-立即调用函数表达式" aria-label="Permalink to &quot;模块化 IIFE 立即调用函数表达式&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">var</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> module </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    var</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> _count </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> 0</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    var</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> m1</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> =</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">        //...</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    };</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    var</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> m2</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> =</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">        //...</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    };</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        m1: m1,</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        m2: m2,</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">})();</span></span></code></pre></div><h3 id="判断数据类型" tabindex="-1">判断数据类型 <a class="header-anchor" href="#判断数据类型" aria-label="Permalink to &quot;判断数据类型&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> isType</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">type</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">obj</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        return</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> Object</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">.prototype.toString.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(obj) </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">===</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;"> \`[object </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">\${</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">type</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">}</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">]\`</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">var</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> isArray </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> isType</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;Array&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span></code></pre></div><h3 id="高阶函数" tabindex="-1">高阶函数 <a class="header-anchor" href="#高阶函数" aria-label="Permalink to &quot;高阶函数&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> sum</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">arr</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> arr.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">reduce</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">((</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">prev</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">cur</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">=&gt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> prev </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">+</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> cur, </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">0</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span></code></pre></div><h3 id="迭代器" tabindex="-1">迭代器 <a class="header-anchor" href="#迭代器" aria-label="Permalink to &quot;迭代器&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> makeIterator</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">array</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    var</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> nextIndex </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> 0</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">        next</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">: </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">            return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> nextIndex </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">&lt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> array.length</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">                ?</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> { value: array[nextIndex</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">++</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">], done: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">false</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> }</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">                :</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> { done: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">true</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        },</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">var</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> it </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> makeIterator</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">([</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">2</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">3</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">]);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(it.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">next</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">().value); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// 1</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(it.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">next</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">().value); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// 2</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(it.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">next</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">().value); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// 3</span></span></code></pre></div><h3 id="缓存函数" tabindex="-1">缓存函数 <a class="header-anchor" href="#缓存函数" aria-label="Permalink to &quot;缓存函数&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> memorize</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">fn</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    var</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> cache </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {};</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> () {</span></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        var</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> key </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;"> arguments</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">.length </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">+</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> Array</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">.prototype.join.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">call</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">arguments</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&quot;,&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">);</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">        if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (key </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">in</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> cache) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">            return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> cache[key];</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        } </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">else</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">            return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (cache[key] </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> fn.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">apply</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">this</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;">arguments</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">));</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">        }</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    };</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">var</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> add</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> =</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> a </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">+</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> b;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">var</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> memorizeAdd </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> memorize</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(add);</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">memorizeAdd</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">2</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">)); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// 3</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">console.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">log</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">memorizeAdd</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">1</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">2</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">)); </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// 3 从缓存中读取</span></span></code></pre></div>`,67),F=[l];function h(k,p,e,r,d,y){return a(),i("div",null,F)}const c=s(t,[["render",h]]);export{o as __pageData,c as default};
