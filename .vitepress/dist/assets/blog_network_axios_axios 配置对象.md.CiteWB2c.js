import{_ as s,D as i,C as a,am as n}from"./chunks/framework.BDOtvRbC.js";const c=JSON.parse('{"title":"axios 配置对象","description":"","frontmatter":{},"headers":[],"relativePath":"blog/network/axios/axios 配置对象.md","filePath":"blog/network/axios/axios 配置对象.md"}'),F={name:"blog/network/axios/axios 配置对象.md"},l=n(`<h1 id="axios-配置对象" tabindex="-1">axios 配置对象 <a class="header-anchor" href="#axios-配置对象" aria-label="Permalink to &quot;axios 配置对象&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">axios github</p><p><a href="https://github.com/axios/axios?tab=readme-ov-file#request-config" target="_blank" rel="noreferrer">https://github.com/axios/axios?tab=readme-ov-file#request-config</a></p></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes monokai monokai vp-code"><code><span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">{</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // 通过 baseURL 和 url 拼接成最终的请求地址</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  url: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&#39;/user&#39;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // method 可以是 get、post、put、delete 等</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  method: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&#39;get&#39;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// default</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // baseURL 将会自动拼接到 url 前面，除非 url 是绝对路径</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // 通过设置 baseURL 可以方便的在 axios 实例中传递相对路径</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  baseURL: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&#39;https://some-domain.com/api/&#39;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // transformRequest 允许在向服务器发送前，修改请求数据</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  transformRequest: [</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">headers</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> data;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  }],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // transformResponse 允许在 then/catch 之前对响应数据进行修改</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  transformResponse: [</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> data;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  }],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // headers 是即将被发送的自定义请求头</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // 有时需要在 headers 中添加一些信息，比如 token、auth 等，经常用到</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  headers: {</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&#39;X-Requested-With&#39;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&#39;XMLHttpRequest&#39;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">},</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // params 是即将与请求一起发送的 URL 参数，经常用到</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  params: {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    ID: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">12345</span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;"> // ?ID=12345</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // paramsSerializer 是一个负责 params 序列化的函数</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  paramsSerializer: {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    encode</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">?:</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">param</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> string</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">)</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> string</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> =&gt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {},</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    serialize</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">?:</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">params</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;"> Record</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">&lt;</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">&gt;, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">options</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">?:</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;"> ParamsSerializerOptions</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> ),</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    indexes: false</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // data 是作为请求主体被发送的数据</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // 作为 json 形式的请求主体被发送的数据</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  data: {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    firstName: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&#39;Fred&#39;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // 作为 params 形式的请求主体被发送的数据</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  data: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&#39;Country=Brasil&amp;City=Belo Horizonte&#39;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // timeout 指定请求超时之前的毫秒数，如果超过 timeout，则请求将被中止</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  timeout: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">1000</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// default is \`0\` (no timeout)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // withCredentials 表示跨域请求时是否需要使用凭证</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // 表明跨域请求时，是否允许携带 cookie</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  withCredentials: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">false</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// default</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // 适配器设置，在浏览器环境中，这将是 XHR 对象</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // 在 node.js 中，将是 http、https 或者 http2 等模块</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  adapter: </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">config</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // auth 表示应该使用 HTTP 基础验证，并提供凭据，不怎么用</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  auth: {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    username: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&#39;janedoe&#39;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">,</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    password: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&#39;s00pers3cret&#39;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // responseType 表示服务器响应的数据类型</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // 可以是 &#39;arraybuffer&#39;、&#39;blob&#39;、&#39;document&#39;、&#39;json&#39;、&#39;text&#39;、&#39;stream&#39; 等</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  responseType: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&#39;json&#39;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// default</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // responseEncoding 表示响应的数据编码</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  responseEncoding: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&#39;utf8&#39;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// default</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // xsrfCookieName 是用作 xsrf token 的值的cookie的名称</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  xsrfCookieName: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&#39;XSRF-TOKEN&#39;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// default</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // xsrfHeaderName 是携带 xsrf token 的值的 HTTP 头的名称</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  xsrfHeaderName: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&#39;X-XSRF-TOKEN&#39;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// default</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // withXSRFToken 表示是否应该在请求中携带 xsrf token</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  withXSRFToken: boolean </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">|</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> undefined</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> |</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> ((</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">config</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">:</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;"> InternalAxiosRequestConfig</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">=&gt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> boolean </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">|</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> undefined</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // onUploadProgress 允许处理上传的进度事件</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  onUploadProgress: </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> ({</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">loaded</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">total</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">progress</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">bytes</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">estimated</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">rate</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">upload</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> =</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> true</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}) {},</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  </span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // onDownloadProgress 允许处理下载的进度事件</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  onDownloadProgress: </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> ({</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">loaded</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">total</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">progress</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">bytes</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">estimated</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">rate</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">download</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> =</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> true</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}) {},</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // maxContentLength 定义允许的响应内容的最大尺寸</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  maxContentLength: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">2000</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // maxBodyLength 定义允许的请求内容的最大尺寸</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  maxBodyLength: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">2000</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // validateStatus 定义对于给定的 HTTP 响应状态码是 resolve 或 reject</span></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // 对于响应状态码的判断</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  validateStatus: </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">status</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">    return</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> status </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">&gt;=</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> 200</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> &amp;&amp;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> status </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">&lt;</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> 300</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">; </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// default</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // maxRedirects 定义在 node.js 中 follow 的最大重定向数</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  maxRedirects: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">21</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// default</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // beforeRedirect 允许在重定向之前修改请求选项</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  beforeRedirect: (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">options</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, { </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">headers</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> }) </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">=&gt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {</span></span>
<span class="line"><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">      if</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (options.hostname </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">===</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;"> &quot;example.com&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">          options.auth </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">=</span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;"> &quot;user:password&quot;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">      }</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // socketPath 定义在 node.js 中使用的 Unix 域套接字</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  socketPath: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">null</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// default</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // transport 定义在 node.js 中使用的自定义 http.Agent</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  transport: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">undefined</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// default</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // httpAgent 和 httpsAgent 分别定义在 node.js 中 http 和 https 的自定义代理</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  httpAgent: </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">new</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> http.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">Agent</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">({ keepAlive: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">true</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> }),</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  httpsAgent: </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">new</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> https.</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;">Agent</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">({ keepAlive: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">true</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> }),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // 代理服务器的信息</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  proxy: {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    protocol: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&#39;https&#39;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">,</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    host: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&#39;127.0.0.1&#39;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">,</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    port: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">9000</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">,</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    auth: {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">      username: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&#39;mikeymike&#39;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">,</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">      password: </span><span style="--shiki-light:#E6DB74;--shiki-dark:#E6DB74;">&#39;rapunz3l&#39;</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    }</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // cancelToken 指定可用于取消请求的 cancel token</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  cancelToken: </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">new</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> CancelToken</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">(</span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">function</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">cancel</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) {}),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // signal 指定可用于取消请求的 AbortController 信号</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  signal: </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">new</span><span style="--shiki-light:#A6E22E;--shiki-dark:#A6E22E;"> AbortController</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">().signal,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // decompress 表示是否应该自动解压缩响应数据</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  decompress: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">true</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// default</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // insecureHTTPParser 表示是否应该使用不安全的 HTTP 解析器</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  insecureHTTPParser: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">undefined</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// default</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // transitional 表示过渡性的配置</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  transitional: {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    silentJSONParsing: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">true</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// default value for the current Axios version</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    forcedJSONParsing: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">true</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">,</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    clarifyTimeoutError: </span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">false</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">,</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // env 用于 node.js 的自定义环境变量</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  env: {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">    FormData: window?.FormData </span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;">||</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> global?.FormData</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // fromSerializer 用于序列化请求参数</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  formSerializer: {</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">      visitor: (</span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">path</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#FD971F;--shiki-dark:#FD971F;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">helpers</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">) </span><span style="--shiki-light:#66D9EF;--shiki-dark:#66D9EF;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">=&gt;</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;"> {};</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">      dots: boolean; </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// use dots instead of brackets format</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">      metaTokens: boolean; </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// keep special endings like {} in parameter key</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">      indexes: boolean; </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// array indexes format null - no brackets, false - empty brackets, true - brackets with indexes</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // maxRate 用于限制请求的速率</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  maxRate: [</span></span>
<span class="line"><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">    100</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> *</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> 1024</span><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">, </span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">// 100KB/s upload limit,</span></span>
<span class="line"><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;">    100</span><span style="--shiki-light:#F92672;--shiki-dark:#F92672;"> *</span><span style="--shiki-light:#AE81FF;--shiki-dark:#AE81FF;"> 1024</span><span style="--shiki-light:#88846F;--shiki-dark:#88846F;">  // 100KB/s download limit</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">  ]</span></span>
<span class="line"><span style="--shiki-light:#F8F8F2;--shiki-dark:#F8F8F2;">}</span></span></code></pre></div>`,3),t=[l];function h(k,p,e,r,d,y){return a(),i("div",null,t)}const o=s(F,[["render",h]]);export{c as __pageData,o as default};
