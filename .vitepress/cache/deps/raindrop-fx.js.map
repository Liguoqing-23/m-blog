{
  "version": 3,
  "sources": ["../../../node_modules/raindrop-fx/node_modules/gl-matrix/cjs/common.js", "../../../node_modules/raindrop-fx/node_modules/gl-matrix/cjs/mat2.js", "../../../node_modules/raindrop-fx/node_modules/gl-matrix/cjs/mat2d.js", "../../../node_modules/raindrop-fx/node_modules/gl-matrix/cjs/mat3.js", "../../../node_modules/raindrop-fx/node_modules/gl-matrix/cjs/mat4.js", "../../../node_modules/raindrop-fx/node_modules/gl-matrix/cjs/vec3.js", "../../../node_modules/raindrop-fx/node_modules/gl-matrix/cjs/vec4.js", "../../../node_modules/raindrop-fx/node_modules/gl-matrix/cjs/quat.js", "../../../node_modules/raindrop-fx/node_modules/gl-matrix/cjs/quat2.js", "../../../node_modules/raindrop-fx/node_modules/gl-matrix/cjs/vec2.js", "../../../node_modules/raindrop-fx/node_modules/gl-matrix/cjs/index.js", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/types/vec3.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/types/vec4.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/types/vec2.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/types/color.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/types/math.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/types/mat4.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/types/quat.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/types/ray.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/types/rect.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/types/types.ts", "../../../node_modules/raindrop-fx/node_modules/reflect-metadata/Reflect.js", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/core/global.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/core/texture-format.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/utils/util.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/core/event.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/core/asset.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/core/shader.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/builtin-assets/shaders.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/utils/image-sizing.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/core/texture.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/core/material.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/core/material-type.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/core/mesh.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/core/render-target.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/builtin-assets/materials.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/builtin-assets/textures.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/utils/mesh-builder.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/builtin-assets/mesh.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/builtin-assets/assets.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/core/renderer.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/core/lines.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/core/buffer.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/core/core.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/plugins/assets-importer/types.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/plugins/assets-importer/assets-importer.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/plugins/texture-importer/texture-importer.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/plugins/plugins.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/utils/public-utils.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/utils/index.ts", "../../../node_modules/raindrop-fx/node_modules/@sardinefish/zogra-renderer/src/index.ts", "../../../node_modules/raindrop-fx/src/index.ts", "../../../node_modules/raindrop-fx/src/renderer.ts", "../../../node_modules/raindrop-fx/src/blur.ts", "../../../node_modules/raindrop-fx/src/random.ts", "../../../node_modules/raindrop-fx/src/raindrop.ts", "../../../node_modules/raindrop-fx/src/utils.ts", "../../../node_modules/raindrop-fx/src/spawner.ts", "../../../node_modules/raindrop-fx/src/simulator.ts"],
  "sourcesContent": ["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setMatrixArrayType = setMatrixArrayType;\nexports.toRadian = toRadian;\nexports.equals = equals;\nexports.RANDOM = exports.ARRAY_TYPE = exports.EPSILON = void 0;\n\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nvar EPSILON = 0.000001;\nexports.EPSILON = EPSILON;\nvar ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexports.ARRAY_TYPE = ARRAY_TYPE;\nvar RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexports.RANDOM = RANDOM;\n\nfunction setMatrixArrayType(type) {\n  exports.ARRAY_TYPE = ARRAY_TYPE = type;\n}\n\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nfunction toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\n\nfunction equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = create;\nexports.clone = clone;\nexports.copy = copy;\nexports.identity = identity;\nexports.fromValues = fromValues;\nexports.set = set;\nexports.transpose = transpose;\nexports.invert = invert;\nexports.adjoint = adjoint;\nexports.determinant = determinant;\nexports.multiply = multiply;\nexports.rotate = rotate;\nexports.scale = scale;\nexports.fromRotation = fromRotation;\nexports.fromScaling = fromScaling;\nexports.str = str;\nexports.frob = frob;\nexports.LDU = LDU;\nexports.add = add;\nexports.subtract = subtract;\nexports.exactEquals = exactEquals;\nexports.equals = equals;\nexports.multiplyScalar = multiplyScalar;\nexports.multiplyScalarAndAdd = multiplyScalarAndAdd;\nexports.sub = exports.mul = void 0;\n\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\nfunction create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\n\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\n\nfunction fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\n\nfunction set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\n\nfunction invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\n\nfunction adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\n\nfunction determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\n\nfunction multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\n\nfunction rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\n\nfunction scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\n\nfunction fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {ReadonlyMat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\n\nfunction str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\n\nfunction frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {ReadonlyMat2} L the lower triangular matrix\r\n * @param {ReadonlyMat2} D the diagonal matrix\r\n * @param {ReadonlyMat2} U the upper triangular matrix\r\n * @param {ReadonlyMat2} a the input matrix to factorize\r\n */\n\n\nfunction LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\n\nvar mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexports.mul = mul;\nvar sub = subtract;\nexports.sub = sub;", "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = create;\nexports.clone = clone;\nexports.copy = copy;\nexports.identity = identity;\nexports.fromValues = fromValues;\nexports.set = set;\nexports.invert = invert;\nexports.determinant = determinant;\nexports.multiply = multiply;\nexports.rotate = rotate;\nexports.scale = scale;\nexports.translate = translate;\nexports.fromRotation = fromRotation;\nexports.fromScaling = fromScaling;\nexports.fromTranslation = fromTranslation;\nexports.str = str;\nexports.frob = frob;\nexports.add = add;\nexports.subtract = subtract;\nexports.multiplyScalar = multiplyScalar;\nexports.multiplyScalarAndAdd = multiplyScalarAndAdd;\nexports.exactEquals = exactEquals;\nexports.equals = equals;\nexports.sub = exports.mul = void 0;\n\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, b,\r\n *  c, d,\r\n *  tx, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, b, 0,\r\n *  c, d, 0,\r\n *  tx, ty, 1]\r\n * </pre>\r\n * The last column is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\nfunction create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\n\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\n\nfunction fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\n\nfunction set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\n\nfunction invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\n\nfunction determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\n\nfunction multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\n\nfunction rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\n\nfunction scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\n\nfunction translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\n\nfunction fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\n\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\n\nfunction str(a) {\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\n\nfunction frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\n\nvar mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nexports.mul = mul;\nvar sub = subtract;\nexports.sub = sub;", "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = create;\nexports.fromMat4 = fromMat4;\nexports.clone = clone;\nexports.copy = copy;\nexports.fromValues = fromValues;\nexports.set = set;\nexports.identity = identity;\nexports.transpose = transpose;\nexports.invert = invert;\nexports.adjoint = adjoint;\nexports.determinant = determinant;\nexports.multiply = multiply;\nexports.translate = translate;\nexports.rotate = rotate;\nexports.scale = scale;\nexports.fromTranslation = fromTranslation;\nexports.fromRotation = fromRotation;\nexports.fromScaling = fromScaling;\nexports.fromMat2d = fromMat2d;\nexports.fromQuat = fromQuat;\nexports.normalFromMat4 = normalFromMat4;\nexports.projection = projection;\nexports.str = str;\nexports.frob = frob;\nexports.add = add;\nexports.subtract = subtract;\nexports.multiplyScalar = multiplyScalar;\nexports.multiplyScalarAndAdd = multiplyScalarAndAdd;\nexports.exactEquals = exactEquals;\nexports.equals = equals;\nexports.sub = exports.mul = void 0;\n\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\nfunction create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\n\nfunction fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\n\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\n\nfunction fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\n\nfunction set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\n\nfunction invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\n\nfunction adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\n\nfunction determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\n\nfunction multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\n\nfunction translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\n\nfunction rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\n\nfunction scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\n\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\n\nfunction fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\n\nfunction fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\n\nfunction fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\n\nfunction normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\n\nfunction projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\n\nfunction str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\n\nfunction frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\n\nvar mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexports.mul = mul;\nvar sub = subtract;\nexports.sub = sub;", "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = create;\nexports.clone = clone;\nexports.copy = copy;\nexports.fromValues = fromValues;\nexports.set = set;\nexports.identity = identity;\nexports.transpose = transpose;\nexports.invert = invert;\nexports.adjoint = adjoint;\nexports.determinant = determinant;\nexports.multiply = multiply;\nexports.translate = translate;\nexports.scale = scale;\nexports.rotate = rotate;\nexports.rotateX = rotateX;\nexports.rotateY = rotateY;\nexports.rotateZ = rotateZ;\nexports.fromTranslation = fromTranslation;\nexports.fromScaling = fromScaling;\nexports.fromRotation = fromRotation;\nexports.fromXRotation = fromXRotation;\nexports.fromYRotation = fromYRotation;\nexports.fromZRotation = fromZRotation;\nexports.fromRotationTranslation = fromRotationTranslation;\nexports.fromQuat2 = fromQuat2;\nexports.getTranslation = getTranslation;\nexports.getScaling = getScaling;\nexports.getRotation = getRotation;\nexports.fromRotationTranslationScale = fromRotationTranslationScale;\nexports.fromRotationTranslationScaleOrigin = fromRotationTranslationScaleOrigin;\nexports.fromQuat = fromQuat;\nexports.frustum = frustum;\nexports.perspective = perspective;\nexports.perspectiveFromFieldOfView = perspectiveFromFieldOfView;\nexports.ortho = ortho;\nexports.lookAt = lookAt;\nexports.targetTo = targetTo;\nexports.str = str;\nexports.frob = frob;\nexports.add = add;\nexports.subtract = subtract;\nexports.multiplyScalar = multiplyScalar;\nexports.multiplyScalarAndAdd = multiplyScalarAndAdd;\nexports.exactEquals = exactEquals;\nexports.equals = equals;\nexports.sub = exports.mul = void 0;\n\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\nfunction create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\n\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\n\nfunction fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\n\nfunction set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\n\nfunction invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\n\nfunction adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\n\nfunction determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\n\nfunction multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\n\nfunction translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\n\nfunction scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\n\nfunction rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\n\nfunction rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\n\nfunction rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\n\nfunction rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\n\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\n\nfunction fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\n\nfunction fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\n\nfunction fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\n\nfunction fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\n\nfunction fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\n\nfunction fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\n\nfunction getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\n\nfunction getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\n\nfunction getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\n\nfunction fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\n\nfunction fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\n\nfunction fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\n\nfunction frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\n\nfunction perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\n\nfunction perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\n\nfunction ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\n\nfunction lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\n\nfunction targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\n\nfunction str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\n\nfunction frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\n\nvar mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexports.mul = mul;\nvar sub = subtract;\nexports.sub = sub;", "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = create;\nexports.clone = clone;\nexports.length = length;\nexports.fromValues = fromValues;\nexports.copy = copy;\nexports.set = set;\nexports.add = add;\nexports.subtract = subtract;\nexports.multiply = multiply;\nexports.divide = divide;\nexports.ceil = ceil;\nexports.floor = floor;\nexports.min = min;\nexports.max = max;\nexports.round = round;\nexports.scale = scale;\nexports.scaleAndAdd = scaleAndAdd;\nexports.distance = distance;\nexports.squaredDistance = squaredDistance;\nexports.squaredLength = squaredLength;\nexports.negate = negate;\nexports.inverse = inverse;\nexports.normalize = normalize;\nexports.dot = dot;\nexports.cross = cross;\nexports.lerp = lerp;\nexports.hermite = hermite;\nexports.bezier = bezier;\nexports.random = random;\nexports.transformMat4 = transformMat4;\nexports.transformMat3 = transformMat3;\nexports.transformQuat = transformQuat;\nexports.rotateX = rotateX;\nexports.rotateY = rotateY;\nexports.rotateZ = rotateZ;\nexports.angle = angle;\nexports.zero = zero;\nexports.str = str;\nexports.exactEquals = exactEquals;\nexports.equals = equals;\nexports.forEach = exports.sqrLen = exports.len = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = void 0;\n\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\nfunction create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\n\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\n\nfunction length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\n\nfunction fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\n\nfunction set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\n\nfunction distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\n\nfunction squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\n\nfunction normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\n\nfunction cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\n\nfunction hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\n\nfunction bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\n\nfunction transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\n\nfunction transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\n\nfunction rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\n\nfunction rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\n\nfunction rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\n\nfunction angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\n\nfunction str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\n\nvar sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexports.sub = sub;\nvar mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexports.mul = mul;\nvar div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexports.div = div;\nvar dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexports.dist = dist;\nvar sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexports.sqrDist = sqrDist;\nvar len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexports.len = len;\nvar sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexports.sqrLen = sqrLen;\n\nvar forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();\n\nexports.forEach = forEach;", "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = create;\nexports.clone = clone;\nexports.fromValues = fromValues;\nexports.copy = copy;\nexports.set = set;\nexports.add = add;\nexports.subtract = subtract;\nexports.multiply = multiply;\nexports.divide = divide;\nexports.ceil = ceil;\nexports.floor = floor;\nexports.min = min;\nexports.max = max;\nexports.round = round;\nexports.scale = scale;\nexports.scaleAndAdd = scaleAndAdd;\nexports.distance = distance;\nexports.squaredDistance = squaredDistance;\nexports.length = length;\nexports.squaredLength = squaredLength;\nexports.negate = negate;\nexports.inverse = inverse;\nexports.normalize = normalize;\nexports.dot = dot;\nexports.cross = cross;\nexports.lerp = lerp;\nexports.random = random;\nexports.transformMat4 = transformMat4;\nexports.transformQuat = transformQuat;\nexports.zero = zero;\nexports.str = str;\nexports.exactEquals = exactEquals;\nexports.equals = equals;\nexports.forEach = exports.sqrLen = exports.len = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = void 0;\n\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\nfunction create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\n\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\n\nfunction fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\n\nfunction set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\n\nfunction distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\n\nfunction length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\n\nfunction squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\n\nfunction normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\n\nfunction cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\n\nfunction random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\n\nfunction transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\n\nfunction transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\n\nfunction str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\n\nvar sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexports.sub = sub;\nvar mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexports.mul = mul;\nvar div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexports.div = div;\nvar dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexports.dist = dist;\nvar sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexports.sqrDist = sqrDist;\nvar len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexports.len = len;\nvar sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexports.sqrLen = sqrLen;\n\nvar forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();\n\nexports.forEach = forEach;", "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = create;\nexports.identity = identity;\nexports.setAxisAngle = setAxisAngle;\nexports.getAxisAngle = getAxisAngle;\nexports.getAngle = getAngle;\nexports.multiply = multiply;\nexports.rotateX = rotateX;\nexports.rotateY = rotateY;\nexports.rotateZ = rotateZ;\nexports.calculateW = calculateW;\nexports.exp = exp;\nexports.ln = ln;\nexports.pow = pow;\nexports.slerp = slerp;\nexports.random = random;\nexports.invert = invert;\nexports.conjugate = conjugate;\nexports.fromMat3 = fromMat3;\nexports.fromEuler = fromEuler;\nexports.str = str;\nexports.setAxes = exports.sqlerp = exports.rotationTo = exports.equals = exports.exactEquals = exports.normalize = exports.sqrLen = exports.squaredLength = exports.len = exports.length = exports.lerp = exports.dot = exports.scale = exports.mul = exports.add = exports.set = exports.copy = exports.fromValues = exports.clone = void 0;\n\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\n\nvar mat3 = _interopRequireWildcard(require(\"./mat3.js\"));\n\nvar vec3 = _interopRequireWildcard(require(\"./vec3.js\"));\n\nvar vec4 = _interopRequireWildcard(require(\"./vec4.js\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\nfunction create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\n\nfunction identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\n\nfunction setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\n\nfunction getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\n\n\nfunction getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n */\n\n\nfunction multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\n\nfunction rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\n\nfunction rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\n\nfunction rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\n\nfunction calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\n\nfunction exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\n\nfunction ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\n\n\nfunction pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\n\nfunction slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random unit quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\n\nfunction random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\n\nfunction invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\n\nfunction conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\n\nfunction fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\n\nfunction fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {ReadonlyQuat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\n\nfunction str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\n\nvar clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexports.clone = clone;\nvar fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexports.fromValues = fromValues;\nvar copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexports.copy = copy;\nvar set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexports.set = set;\nvar add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexports.add = add;\nvar mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {ReadonlyQuat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexports.mul = mul;\nvar scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexports.scale = scale;\nvar dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexports.dot = dot;\nvar lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexports.lerp = lerp;\nvar length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexports.length = length;\nvar len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexports.len = len;\nvar squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexports.squaredLength = squaredLength;\nvar sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexports.sqrLen = sqrLen;\nvar normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat} a The first quaternion.\r\n * @param {ReadonlyQuat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexports.normalize = normalize;\nvar exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat} a The first vector.\r\n * @param {ReadonlyQuat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexports.exactEquals = exactEquals;\nvar equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexports.equals = equals;\n\nvar rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\n\nexports.rotationTo = rotationTo;\n\nvar sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\n\nexports.sqlerp = sqlerp;\n\nvar setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();\n\nexports.setAxes = setAxes;", "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = create;\nexports.clone = clone;\nexports.fromValues = fromValues;\nexports.fromRotationTranslationValues = fromRotationTranslationValues;\nexports.fromRotationTranslation = fromRotationTranslation;\nexports.fromTranslation = fromTranslation;\nexports.fromRotation = fromRotation;\nexports.fromMat4 = fromMat4;\nexports.copy = copy;\nexports.identity = identity;\nexports.set = set;\nexports.getDual = getDual;\nexports.setDual = setDual;\nexports.getTranslation = getTranslation;\nexports.translate = translate;\nexports.rotateX = rotateX;\nexports.rotateY = rotateY;\nexports.rotateZ = rotateZ;\nexports.rotateByQuatAppend = rotateByQuatAppend;\nexports.rotateByQuatPrepend = rotateByQuatPrepend;\nexports.rotateAroundAxis = rotateAroundAxis;\nexports.add = add;\nexports.multiply = multiply;\nexports.scale = scale;\nexports.lerp = lerp;\nexports.invert = invert;\nexports.conjugate = conjugate;\nexports.normalize = normalize;\nexports.str = str;\nexports.exactEquals = exactEquals;\nexports.equals = equals;\nexports.sqrLen = exports.squaredLength = exports.len = exports.length = exports.dot = exports.mul = exports.setReal = exports.getReal = void 0;\n\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\n\nvar quat = _interopRequireWildcard(require(\"./quat.js\"));\n\nvar mat4 = _interopRequireWildcard(require(\"./mat4.js\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\nfunction create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\n\nfunction clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\n\nfunction fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\n\nfunction fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q a normalized quaternion\r\n * @param {ReadonlyVec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\n\nfunction fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyVec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\n\nfunction fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\n\nfunction fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {ReadonlyMat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\n\nfunction fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\n\nfunction identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\n\nfunction set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\n\nvar getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexports.getReal = getReal;\n\nfunction getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\n\nvar setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexports.setReal = setReal;\n\nfunction setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\n\nfunction getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\n\nfunction translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\n\nfunction rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\n\nfunction rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\n\nfunction rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\n\nfunction rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\n\nfunction rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\n\nfunction rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\n\nfunction multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\n\nvar mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexports.mul = mul;\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\n\nvar dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexports.dot = dot;\n\nfunction lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\n\nfunction invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\n\nfunction conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\n\nvar length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexports.length = length;\nvar len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexports.len = len;\nvar squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexports.squaredLength = squaredLength;\nvar sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexports.sqrLen = sqrLen;\n\nfunction normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\n\nfunction str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quaternion.\r\n * @param {ReadonlyQuat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quat.\r\n * @param {ReadonlyQuat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}", "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = create;\nexports.clone = clone;\nexports.fromValues = fromValues;\nexports.copy = copy;\nexports.set = set;\nexports.add = add;\nexports.subtract = subtract;\nexports.multiply = multiply;\nexports.divide = divide;\nexports.ceil = ceil;\nexports.floor = floor;\nexports.min = min;\nexports.max = max;\nexports.round = round;\nexports.scale = scale;\nexports.scaleAndAdd = scaleAndAdd;\nexports.distance = distance;\nexports.squaredDistance = squaredDistance;\nexports.length = length;\nexports.squaredLength = squaredLength;\nexports.negate = negate;\nexports.inverse = inverse;\nexports.normalize = normalize;\nexports.dot = dot;\nexports.cross = cross;\nexports.lerp = lerp;\nexports.random = random;\nexports.transformMat2 = transformMat2;\nexports.transformMat2d = transformMat2d;\nexports.transformMat3 = transformMat3;\nexports.transformMat4 = transformMat4;\nexports.rotate = rotate;\nexports.angle = angle;\nexports.zero = zero;\nexports.str = str;\nexports.exactEquals = exactEquals;\nexports.equals = equals;\nexports.forEach = exports.sqrLen = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = exports.len = void 0;\n\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\nfunction create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\n\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\n\nfunction fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\n\nfunction set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\n\nfunction distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\n\nfunction length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\n\nfunction squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\n\nfunction normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\n\nfunction cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\n\nfunction transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\n\nfunction transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\n\nfunction transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {ReadonlyVec2} a The vec2 point to rotate\r\n * @param {ReadonlyVec2} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec2} out\r\n */\n\n\nfunction rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {ReadonlyVec2} a The first operand\r\n * @param {ReadonlyVec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\n\nfunction angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\n\nfunction str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\n\nvar len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexports.len = len;\nvar sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexports.sub = sub;\nvar mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexports.mul = mul;\nvar div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexports.div = div;\nvar dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexports.dist = dist;\nvar sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexports.sqrDist = sqrDist;\nvar sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexports.sqrLen = sqrLen;\n\nvar forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();\n\nexports.forEach = forEach;", "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.vec4 = exports.vec3 = exports.vec2 = exports.quat2 = exports.quat = exports.mat4 = exports.mat3 = exports.mat2d = exports.mat2 = exports.glMatrix = void 0;\n\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\n\nexports.glMatrix = glMatrix;\n\nvar mat2 = _interopRequireWildcard(require(\"./mat2.js\"));\n\nexports.mat2 = mat2;\n\nvar mat2d = _interopRequireWildcard(require(\"./mat2d.js\"));\n\nexports.mat2d = mat2d;\n\nvar mat3 = _interopRequireWildcard(require(\"./mat3.js\"));\n\nexports.mat3 = mat3;\n\nvar mat4 = _interopRequireWildcard(require(\"./mat4.js\"));\n\nexports.mat4 = mat4;\n\nvar quat = _interopRequireWildcard(require(\"./quat.js\"));\n\nexports.quat = quat;\n\nvar quat2 = _interopRequireWildcard(require(\"./quat2.js\"));\n\nexports.quat2 = quat2;\n\nvar vec2 = _interopRequireWildcard(require(\"./vec2.js\"));\n\nexports.vec2 = vec2;\n\nvar vec3 = _interopRequireWildcard(require(\"./vec3.js\"));\n\nexports.vec3 = vec3;\n\nvar vec4 = _interopRequireWildcard(require(\"./vec4.js\"));\n\nexports.vec4 = vec4;\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }", null, null, null, null, null, null, null, null, null, null, "/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof global === \"object\" ? global :\n            typeof self === \"object\" ? self :\n                typeof this === \"object\" ? this :\n                    Function(\"return this;\")();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        else {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter);\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                if (typeof target[key] !== \"function\") {\n                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                }\n                if (previous)\n                    previous(key, value);\n            };\n        }\n    })(function (exporter) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var usePolyfill = typeof process === \"object\" && process.env && process.env[\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\n        var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        // [[Metadata]] internal slot\n        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n        var Metadata = new _WeakMap();\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            if (!metadataMap.delete(metadataKey))\n                return false;\n            if (metadataMap.size > 0)\n                return true;\n            var targetMetadata = Metadata.get(target);\n            targetMetadata.delete(propertyKey);\n            if (targetMetadata.size > 0)\n                return true;\n            Metadata.delete(target);\n            return true;\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        function GetOrCreateMetadataMap(O, P, Create) {\n            var targetMetadata = Metadata.get(O);\n            if (IsUndefined(targetMetadata)) {\n                if (!Create)\n                    return undefined;\n                targetMetadata = new _Map();\n                Metadata.set(O, targetMetadata);\n            }\n            var metadataMap = targetMetadata.get(P);\n            if (IsUndefined(metadataMap)) {\n                if (!Create)\n                    return undefined;\n                metadataMap = new _Map();\n                targetMetadata.set(P, metadataMap);\n            }\n            return metadataMap;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            return ToBoolean(metadataMap.has(MetadataKey));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return undefined;\n            return metadataMap.get(MetadataKey);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n            metadataMap.set(MetadataKey, MetadataValue);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var keys = [];\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return keys;\n            var keysObj = metadataMap.keys();\n            var iterator = GetIterator(keysObj);\n            var k = 0;\n            while (true) {\n                var next = IteratorStep(iterator);\n                if (!next) {\n                    keys.length = k;\n                    return keys;\n                }\n                var nextValue = IteratorValue(next);\n                try {\n                    keys[k] = nextValue;\n                }\n                catch (e) {\n                    try {\n                        IteratorClose(iterator);\n                    }\n                    finally {\n                        throw e;\n                    }\n                }\n                k++;\n            }\n        }\n        // 6 ECMAScript Data Typ0es and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            return /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (key === this._cacheKey) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (this._cacheKey !== key) {\n                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            return /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.values(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    if (typeof crypto !== \"undefined\")\n                        return crypto.getRandomValues(new Uint8Array(size));\n                    if (typeof msCrypto !== \"undefined\")\n                        return msCrypto.getRandomValues(new Uint8Array(size));\n                    return FillRandomBytes(new Uint8Array(size), size);\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 \u00A7 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "import { Rect, TextureData, vec2 } from \"@sardinefish/zogra-renderer\";\r\nimport { RaindropRenderer, RenderOptions } from \"./renderer\";\r\nimport { RaindropSimulator, SimulatorOptions } from \"./simulator\";\r\nimport { Time } from \"./utils\";\r\n\r\ninterface Options extends SimulatorOptions, RenderOptions\r\n{\r\n}\r\n\r\nclass RaindropFX\r\n{\r\n    public options: Options;\r\n    public renderer: RaindropRenderer;\r\n    public simulator: RaindropSimulator;\r\n\r\n    private animHandle = 0;\r\n\r\n    constructor(options: Partial<Options> & {canvas: HTMLCanvasElement})\r\n    {\r\n        const canvas = options.canvas;\r\n        const defaultOptions: Options = {\r\n            // Simulator options\r\n            spawnInterval: [0.1, 0.1],\r\n            spawnSize: [60, 100],\r\n            spawnLimit: 2000,\r\n            viewport: new Rect(vec2.zero(), vec2(canvas.width, canvas.height)),\r\n            canvas: canvas,\r\n            width: canvas.width,\r\n            height: canvas.height,\r\n            background: \"\",\r\n            gravity: 2400,\r\n            slipRate: 0,\r\n            motionInterval: [0.1, 0.4],\r\n            colliderSize: 1,\r\n            trailDropDensity: 0.2,\r\n            trailDistance: [20, 30],\r\n            trailDropSize: [0.3, 0.5],\r\n            trailSpread: 0.6,\r\n            initialSpread: 0.5,\r\n            shrinkRate: 0.01,\r\n            velocitySpread: 0.3,\r\n            evaporate: 10,\r\n            xShifting: [0, 0.1],\r\n\r\n            // Rendering options\r\n            backgroundBlurSteps: 3,\r\n            mist: true,\r\n            mistColor: [0.01, 0.01, 0.01, 1],\r\n            mistBlurStep: 4,\r\n            mistTime: 10,\r\n            dropletsPerSeconds: 500,\r\n            dropletSize: [10, 30],\r\n            smoothRaindrop: [0.96, 0.99],\r\n            refractBase: 0.4,\r\n            refractScale: 0.6,\r\n            raindropCompose: \"smoother\",\r\n            raindropLightPos: [-1, 1, 2, 0],\r\n            raindropDiffuseLight: [0.2, 0.2, 0.2],\r\n            raindropShadowOffset: 0.8,\r\n            raindropEraserSize: [0.93, 1.0],\r\n            raindropSpecularLight: [0, 0, 0],\r\n            raindropSpecularShininess: 256,\r\n            raindropLightBump: 1,\r\n        };\r\n        this.options = { ...defaultOptions, ...options };\r\n\r\n        this.simulator = new RaindropSimulator(this.options);\r\n        this.renderer = new RaindropRenderer(this.options);\r\n    }\r\n    \r\n    async start()\r\n    {\r\n        await this.renderer.loadAssets();\r\n\r\n        let lastFrameTime = 0;\r\n        const update = (delay: number) =>\r\n        {\r\n            const dt = (delay - lastFrameTime) / 1000;\r\n            lastFrameTime = delay;\r\n            const time = <Time>{\r\n                dt: 0.03,\r\n                total: delay / 1000\r\n            };\r\n\r\n            this.update(time);\r\n\r\n            this.animHandle = requestAnimationFrame(update);\r\n        };\r\n\r\n        this.animHandle =  requestAnimationFrame(update);\r\n    }\r\n    \r\n    stop()\r\n    {\r\n        cancelAnimationFrame(this.animHandle);\r\n    }\r\n\r\n    resize(width: number, height: number)\r\n    {\r\n        this.options.width = width;\r\n        this.options.height = height;\r\n        this.options.viewport = new Rect(vec2.zero(), vec2(width, height));\r\n        this.renderer.resize();\r\n    }\r\n\r\n    async setBackground(background: string | TextureData)\r\n    {\r\n        this.renderer.options.background = background;\r\n        await this.renderer.reloadBackground();\r\n    }\r\n    \r\n    private update(time: Time)\r\n    {\r\n        this.simulator.update(time);\r\n\r\n        this.renderer.render(this.simulator.raindrops, time);\r\n    }\r\n\r\n}\r\n\r\nexport = RaindropFX;", "import\r\n{\r\n    Blending, Color, DepthTest, mat4, MaterialFromShader, MeshBuilder, quat, RenderBuffer,\r\n    RenderTarget, RenderTexture, Shader, shaderProp, SimpleTexturedMaterial, Texture, Texture2D, TextureData,\r\n    TextureFormat, TextureImporter, Utils, vec2, vec4, WrapMode, ZograRenderer\r\n} from \"@sardinefish/zogra-renderer\";\r\nimport raindropTexture from \"../assets/img/raindrop.png\";\r\nimport { BlurRenderer } from \"./blur\";\r\nimport { RainDrop } from \"./raindrop\";\r\nimport { randomRange } from \"./random\";\r\nimport defaultFrag from \"./shader/2d-frag.glsl\";\r\nimport defaultVert from \"./shader/2d-vert.glsl\";\r\nimport mistBackground from \"./shader/bg-mist.glsl\";\r\nimport composeFrag from \"./shader/compose.glsl\";\r\nimport dropletVert from \"./shader/droplet-vert.glsl\";\r\nimport dropletFrag from \"./shader/droplet.glsl\";\r\nimport raindropErase from \"./shader/erase.glsl\";\r\nimport raindropFrag from \"./shader/raindrop-frag.glsl\";\r\nimport raindropVert from \"./shader/raindrop-vert.glsl\";\r\nimport { Time } from \"./utils\";\r\n\r\n\r\nclass RaindropMaterial extends MaterialFromShader(new Shader(raindropVert, raindropFrag, {\r\n    blendRGB: [Blending.OneMinusDstColor, Blending.OneMinusSrcColor],\r\n    depth: DepthTest.Disable,\r\n    zWrite: false,\r\n    attributes: {\r\n        size: \"aSize\",\r\n        modelMatrix: \"aModelMatrix\",\r\n    }\r\n}))\r\n{\r\n    @shaderProp(\"uMainTex\", \"tex2d\")\r\n    texture: Texture | null = null;\r\n\r\n    @shaderProp(\"uSize\", \"float\")\r\n    size: number = 0;\r\n}\r\n\r\nclass DropletMaterial extends MaterialFromShader(new Shader(dropletVert, dropletFrag, {\r\n    blendRGB: [Blending.OneMinusDstColor, Blending.OneMinusSrcColor],\r\n    depth: DepthTest.Disable,\r\n    zWrite: false,\r\n    attributes: {\r\n        size: \"aSize\",\r\n        modelMatrix: \"aModelMatrix\",\r\n    }\r\n}))\r\n{\r\n    @shaderProp(\"uMainTex\", \"tex2d\")\r\n    texture: Texture | null = null;\r\n\r\n    @shaderProp(\"uSpawnRect\", \"vec4\")\r\n    spawnRect: vec4 = vec4(0, 0, 1, 1);\r\n\r\n    @shaderProp(\"uSizeRange\", \"vec2\")\r\n    sizeRange: vec2 = vec2(10, 20);\r\n\r\n    @shaderProp(\"uSeed\", \"float\")\r\n    seed: number = 1;\r\n}\r\n\r\nclass FinalCompose extends MaterialFromShader(new Shader(defaultVert, composeFrag, {\r\n    blend: [Blending.SrcAlpha, Blending.OneMinusSrcAlpha],\r\n    depth: DepthTest.Disable,\r\n    zWrite: false\r\n}))\r\n{\r\n    @shaderProp(\"uMainTex\", \"tex2d\")\r\n    background: Texture | null = null;\r\n\r\n    @shaderProp(\"uBackgroundSize\", \"vec4\")\r\n    backgroundSize: vec4 = vec4.one();\r\n\r\n    @shaderProp(\"uRaindropTex\", \"tex2d\")\r\n    raindropTex: Texture | null = null;\r\n\r\n    @shaderProp(\"uDropletTex\", \"tex2d\")\r\n    dropletTex: Texture | null = null;\r\n\r\n    @shaderProp(\"uMistTex\", \"tex2d\")\r\n    mistTex: Texture | null = null;\r\n\r\n    @shaderProp(\"uSmoothRaindrop\", \"vec2\")\r\n    smoothRaindrop: vec2 = vec2(0.95, 1.0);\r\n\r\n    @shaderProp(\"uRefractParams\", \"vec2\")\r\n    refractParams: vec2 = vec2(0.4, 0.6);\r\n\r\n    @shaderProp(\"uLightPos\", \"vec4\")\r\n    lightPos: vec4 = vec4(.5, .5, 2, 1);\r\n\r\n    @shaderProp(\"uDiffuseColor\", \"color\")\r\n    diffuseLight: Color = new Color(0.3, 0.3, 0.3, 0.8);\r\n\r\n    @shaderProp(\"uSpecularParams\", \"vec4\")\r\n    specularParams: vec4 = vec4(1, 1, 1, 32);\r\n\r\n    @shaderProp(\"uBump\", \"float\")\r\n    bump: number = 1;\r\n}\r\n\r\nclass RaindropErase extends SimpleTexturedMaterial(new Shader(defaultVert, raindropErase, {\r\n    // blend: [Blending.Zero, Blending.OneMinusSrcAlpha],\r\n    blendRGB: [Blending.Zero, Blending.OneMinusSrcAlpha],\r\n    blendAlpha: [Blending.Zero, Blending.OneMinusSrcAlpha],\r\n}))\r\n{\r\n    @shaderProp(\"uEraserSmooth\", \"vec2\")\r\n    eraserSize: vec2 = vec2(0.93, 1.0);\r\n}\r\n\r\nconst MistAccumulate = SimpleTexturedMaterial(new Shader(defaultVert, defaultFrag, {\r\n    blend: [Blending.One, Blending.One]\r\n}));\r\n\r\nclass MistBackgroundCompose extends SimpleTexturedMaterial(new Shader(defaultVert, mistBackground, {\r\n    blend: [Blending.SrcAlpha, Blending.OneMinusSrcAlpha]\r\n}))\r\n{\r\n    @shaderProp(\"uMistColor\", \"color\")\r\n    mistColor: Color = new Color(0.01, 0.01, 0.01, 1);\r\n\r\n    @shaderProp(\"uMistTex\", \"tex2d\")\r\n    mistTex: Texture | null = null;\r\n}\r\n\r\n\r\nexport interface RenderOptions\r\n{\r\n    canvas: HTMLCanvasElement;\r\n    width: number;\r\n    height: number;\r\n    background: TextureData | string;\r\n    /**\r\n     * Background blur steps used for background & raindrop refract image.\r\n     * Value should be integer from 0 to log2(backgroundSize).\r\n     * Recommend 3 or 4\r\n     */\r\n    backgroundBlurSteps: number;\r\n    /**\r\n     * Enable blurry mist effect\r\n     */\r\n    mist: boolean;\r\n    /**\r\n     * [r, g, b, a] mist color, each component in range (0..1). \r\n     * The alpha is used for whole mist layer.\r\n     * Recommend [0.01, 0.01, 0.01, 1]\r\n     */\r\n    mistColor: [number, number, number, number];\r\n    /**\r\n     * Describe how long takes mist alpha from 0 to 1\r\n     */\r\n    mistTime: number;\r\n    /**\r\n     * Background blur steps used for mist.\r\n     * Value should be integer from 0 to log2(backgroundSize).\r\n     * Recommended value = backgroundBlurSteps + 1\r\n     */\r\n    mistBlurStep: number;\r\n    /**\r\n     * Tiny droplet spawn rate.\r\n     */\r\n    dropletsPerSeconds: number;\r\n    /**\r\n     * Random size range of tiny drplets.\r\n     * Recommend [10, 30]\r\n     */\r\n    dropletSize: [number, number];\r\n    /**\r\n     * Smooth range [a, b] of raindrop edge.\r\n     * Recommend [0.96, 1.0]\r\n     * \r\n     * Larger range of (b - a) have smoother edge.\r\n     * \r\n     * Lower value b makes raindrop larger with a distort edge\r\n     */\r\n    smoothRaindrop: [number, number];\r\n    /**\r\n     * Refract uv scale of minimal raindrop.\r\n     * Recommend in range (0.2, 0.6)\r\n     */\r\n    refractBase: number,\r\n    /**\r\n     * Refract uv scaled by raindrop size.\r\n     * Rocommend in range (0.4, 0.8)\r\n     */\r\n    refractScale: number,\r\n    /**\r\n     * Describe how raindrops are composed.\r\n     * \r\n     * - `smoother` compose raindrops normal with 'exclusion' blend mode\r\n     * \r\n     * - `harder` compose raindrops normal with 'normal' blend mode\r\n     */\r\n    raindropCompose: \"smoother\" | \"harder\"\r\n    /**\r\n     * Screen space (0..1) light direction or position.\r\n     * Recommend [-1, 1, 2, 0]\r\n     * \r\n     * - Use [x, y, z, 0] to indicate a direction\r\n     * \r\n     * - Use [x, y, z, 1] to indicate a position\r\n     */\r\n    raindropLightPos: [number, number, number, number];\r\n    /**\r\n     * Lambertian diffuse lighting Color.\r\n     * Recommend [0.3, 0.3, 0.3]\r\n     */\r\n    raindropDiffuseLight: [number, number, number];\r\n    /**\r\n     * Higher value makes more shadow.\r\n     * Recommend in range (0.6..0.8)\r\n     */\r\n    raindropShadowOffset: number;\r\n    /**\r\n     * Similar to `smoothRaindrop`. Used to erase droplets & mist.\r\n     * Recommended value [0.93, 1.0]\r\n     */\r\n    raindropEraserSize: [number, number];\r\n    /**\r\n     * Specular light clor.\r\n     * Recommend disable it with [0, 0, 0] :)\r\n     */\r\n    raindropSpecularLight: [number, number, number];\r\n    /**\r\n     * Blinn-Phong exponent representing shininess.\r\n     * Value from 0 to 1024 is ok\r\n     */\r\n    raindropSpecularShininess: number;\r\n    /**\r\n     * Will apply to calculate screen space normal for lighting.\r\n     * Larger value makes raindrops looks more flat.\r\n     * Recommend in range (0.3..1)\r\n     */\r\n    raindropLightBump: number,\r\n\r\n}\r\n\r\nexport class RaindropRenderer\r\n{\r\n    renderer: ZograRenderer;\r\n    options: RenderOptions;\r\n\r\n    private raindropTex: Texture2D = null as any;\r\n    private originalBackground: Texture2D = null as any;\r\n    private background: RenderTexture;\r\n    private raindropComposeTex: RenderTexture;\r\n    private dropletTexture: RenderTexture;\r\n    private mistTexture: RenderTexture;\r\n    private blurryBackground: RenderTexture;\r\n    private mistBackground: RenderTexture;\r\n    private blurRenderer: BlurRenderer;\r\n\r\n    private matrlCompose = new FinalCompose();\r\n    private matrlRaindrop = new RaindropMaterial();\r\n    private matrlDroplet = new DropletMaterial();\r\n    private matrlErase = new RaindropErase();\r\n    private matrlMist = new MistAccumulate();\r\n    private matrlMistCompose = new MistBackgroundCompose();\r\n\r\n    private projectionMatrix: mat4;\r\n    private mesh = MeshBuilder.quad();\r\n    private raindropBuffer = new RenderBuffer({\r\n        size: \"float\",\r\n        modelMatrix: \"mat4\",\r\n    }, 3000);\r\n\r\n    // deubg: DebugLayerRenderer = new DebugLayerRenderer();\r\n\r\n    constructor(options: RenderOptions)\r\n    {\r\n        this.renderer = new ZograRenderer(options.canvas);\r\n        this.renderer.gl.getExtension(\"EXT_color_buffer_float\");\r\n        this.options = options;\r\n\r\n        this.projectionMatrix = mat4.ortho(0, options.width, 0, options.height, 1, -1);\r\n        this.raindropComposeTex = new RenderTexture(options.width, options.height, false);\r\n        this.background = new RenderTexture(options.width, options.height, false);\r\n        this.dropletTexture = new RenderTexture(options.width, options.height, false);\r\n        this.blurryBackground = new RenderTexture(options.width, options.height, false);\r\n        this.mistBackground = new RenderTexture(options.width, options.height, false);\r\n        this.mistTexture = new RenderTexture(options.width, options.height, false, TextureFormat.R16F);\r\n\r\n        this.blurRenderer = new BlurRenderer(this.renderer);\r\n\r\n        this.renderer.setViewProjection(mat4.identity(), this.projectionMatrix);\r\n    }\r\n    async loadAssets()\r\n    {\r\n        // this.renderer.blit(null, RenderTarget.CanvasTarget);\r\n        this.raindropTex = await TextureImporter\r\n            .buffer(raindropTexture)\r\n            .then(t=>t.tex2d());\r\n\r\n        this.matrlRaindrop.texture = this.raindropTex;\r\n        this.matrlDroplet.texture = this.raindropTex;\r\n\r\n        await this.reloadBackground();\r\n\r\n    }\r\n    async reloadBackground()\r\n    {\r\n        this.originalBackground?.destroy();\r\n        if (typeof (this.options.background) === \"string\")\r\n        {\r\n            this.originalBackground = await TextureImporter\r\n                .url(this.options.background)\r\n                .then(t => t.tex2d({ wrapMpde: WrapMode.Clamp }));\r\n\r\n            this.originalBackground.wrapMode = WrapMode.Clamp;\r\n            this.originalBackground.updateParameters();\r\n        }\r\n        else\r\n        {\r\n            this.originalBackground = new Texture2D();\r\n            this.originalBackground.setData(this.options.background);\r\n            this.originalBackground.updateParameters();\r\n        }\r\n        const [srcRect, dstRect] = Utils.imageResize(this.originalBackground.size, this.background.size, Utils.ImageSizing.Cover);\r\n        this.renderer.blit(this.originalBackground, this.background, this.renderer.assets.materials.blitCopy, srcRect, dstRect);\r\n        this.background.generateMipmap();\r\n\r\n        this.blurBackground();\r\n    }\r\n    resize()\r\n    {\r\n        this.renderer.setSize(this.options.width, this.options.height);\r\n        this.projectionMatrix = mat4.ortho(0, this.options.width, 0, this.options.height, 1, -1);\r\n        this.renderer.setViewProjection(mat4.identity(), this.projectionMatrix);\r\n\r\n        this.raindropComposeTex.resize(this.options.width, this.options.height);\r\n        this.background.resize(this.options.width, this.options.height);\r\n        this.dropletTexture.resize(this.options.width, this.options.height);\r\n        this.blurryBackground.resize(this.options.width, this.options.height);\r\n        this.mistBackground.resize(this.options.width, this.options.height);\r\n        this.mistTexture.resize(this.options.width, this.options.height);\r\n\r\n        const [srcRect, dstRect] = Utils.imageResize(this.originalBackground.size, this.background.size, Utils.ImageSizing.Cover);\r\n        this.renderer.blit(this.originalBackground, this.background, this.renderer.assets.materials.blitCopy, srcRect, dstRect);\r\n        this.background.generateMipmap();\r\n\r\n        this.blurBackground();\r\n    }\r\n    render(raindrops: RainDrop[], time: Time)\r\n    {\r\n        this.drawDroplet(time);\r\n        this.drawMist(time.dt);\r\n        this.drawRaindrops(raindrops);\r\n\r\n        this.renderer.setRenderTarget(RenderTarget.CanvasTarget);\r\n        this.renderer.clear(Color.black);\r\n\r\n        this.drawBackground();\r\n\r\n        this.matrlCompose.background = this.blurryBackground;\r\n        this.matrlCompose.backgroundSize = vec4(this.options.width, this.options.height, 1 / this.options.width, 1 / this.options.height);\r\n        this.matrlCompose.raindropTex = this.raindropComposeTex;\r\n        this.matrlCompose.dropletTex = this.dropletTexture;\r\n        this.matrlCompose.mistTex = this.mistTexture;\r\n        this.matrlCompose.smoothRaindrop = vec2(...this.options.smoothRaindrop);\r\n        this.matrlCompose.refractParams = vec2(this.options.refractBase, this.options.refractScale);\r\n        this.matrlCompose.lightPos = vec4(...this.options.raindropLightPos);\r\n        this.matrlCompose.diffuseLight = new Color(...this.options.raindropDiffuseLight, this.options.raindropShadowOffset);\r\n        this.matrlCompose.specularParams = vec4(...this.options.raindropSpecularLight, this.options.raindropSpecularShininess);\r\n        this.matrlCompose.bump = this.options.raindropLightBump;\r\n\r\n        this.renderer.blit(null, RenderTarget.CanvasTarget, this.matrlCompose);\r\n    }\r\n\r\n    private blurBackground()\r\n    {\r\n        // Blur background with N steps downsample + N steps upsample\r\n        if (!this.options.mist)\r\n        {\r\n            this.blurRenderer.blur(this.background, this.options.backgroundBlurSteps, this.blurryBackground);\r\n        }\r\n        else\r\n        {\r\n            // Downsample to max steps\r\n            // Then upsample from a larger texture before smaller texture to avoid override\r\n            this.blurRenderer.init(this.background);\r\n            this.blurRenderer.downSample(this.background, Math.max(this.options.backgroundBlurSteps, this.options.mistBlurStep));\r\n\r\n            if (this.options.backgroundBlurSteps === this.options.mistBlurStep)\r\n            {\r\n                this.blurRenderer.upSample(this.options.backgroundBlurSteps, this.blurryBackground);\r\n                this.renderer.blit(this.blurryBackground, this.mistBackground);\r\n            }\r\n            else if (this.options.mistBlurStep > this.options.backgroundBlurSteps)\r\n            {\r\n                this.blurRenderer.upSample(this.options.backgroundBlurSteps, this.blurryBackground);\r\n                this.blurRenderer.upSample(this.options.mistBlurStep, this.mistBackground);\r\n            }\r\n            else\r\n            {\r\n                this.blurRenderer.upSample(this.options.mistBlurStep, this.mistBackground);\r\n                this.blurRenderer.upSample(this.options.backgroundBlurSteps, this.blurryBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    private drawMist(dt: number)\r\n    {\r\n        if (!this.options.mist)\r\n            return;\r\n        this.matrlMist.color.r = dt / this.options.mistTime;\r\n        this.renderer.blit(this.renderer.assets.textures.default, this.mistTexture, this.matrlMist);\r\n    }\r\n\r\n    private drawBackground()\r\n    {\r\n        this.renderer.blit(this.blurryBackground, RenderTarget.CanvasTarget);\r\n\r\n        if (this.options.mist)\r\n        {\r\n            this.matrlMistCompose.mistTex = this.mistTexture;\r\n            this.matrlMistCompose.texture = this.mistBackground;\r\n            this.matrlMistCompose.mistColor = new Color(...this.options.mistColor);\r\n            this.renderer.blit(this.mistBackground, RenderTarget.CanvasTarget, this.matrlMistCompose);\r\n        }\r\n\r\n    }\r\n\r\n    private drawRaindrops(raindrops: RainDrop[])\r\n    {\r\n        if (raindrops.length > this.raindropBuffer.length)\r\n            this.raindropBuffer.resize(this.raindropBuffer.length * 2);\r\n        this.renderer.setRenderTarget(this.raindropComposeTex);\r\n        this.renderer.clear(Color.black.transparent());\r\n        for (let i = 0; i < raindrops.length; i++)\r\n        {\r\n            const raindrop = raindrops[i];\r\n            const model = mat4.rts(quat.identity(), raindrop.pos.toVec3(), raindrop.size.toVec3(1));\r\n            this.raindropBuffer[i].modelMatrix.set(model);\r\n            this.raindropBuffer[i].size[0] = raindrop.size.x / 100;\r\n        }\r\n        switch (this.options.raindropCompose)\r\n        {\r\n            case \"smoother\":\r\n                this.matrlRaindrop.shader.setPipelineStates({\r\n                    blendRGB: [Blending.OneMinusDstColor, Blending.OneMinusSrcColor]\r\n                });\r\n                this.matrlDroplet.shader.setPipelineStates({\r\n                    blendRGB: [Blending.OneMinusDstColor, Blending.OneMinusSrcColor],\r\n                });\r\n                break;\r\n            case \"harder\":\r\n                this.matrlRaindrop.shader.setPipelineStates({\r\n                    blendRGB: [Blending.One, Blending.OneMinusSrcAlpha]\r\n                });\r\n                this.matrlDroplet.shader.setPipelineStates({\r\n                    blendRGB: [Blending.One, Blending.OneMinusSrcAlpha],\r\n                });\r\n                break;\r\n        }\r\n        this.renderer.drawMeshInstance(this.mesh, this.raindropBuffer, this.matrlRaindrop, raindrops.length);\r\n        this.matrlErase.eraserSize = vec2(...this.options.raindropEraserSize);\r\n        this.renderer.blit(this.raindropComposeTex, this.dropletTexture, this.matrlErase);\r\n        if (this.options.mist)\r\n            this.renderer.blit(this.raindropComposeTex, this.mistTexture, this.matrlErase);\r\n    }\r\n\r\n    private drawDroplet(time: Time)\r\n    {\r\n        this.renderer.setRenderTarget(this.dropletTexture);\r\n        const count = this.options.dropletsPerSeconds * time.dt;\r\n        this.matrlDroplet.spawnRect = vec4(0, 0, this.options.width, this.options.height);\r\n        this.matrlDroplet.sizeRange = vec2(...this.options.dropletSize);\r\n        this.matrlDroplet.seed = randomRange(0, 133);\r\n        this.renderer.drawMeshProceduralInstance(this.mesh, this.matrlDroplet, count);\r\n    }\r\n}", "import { div, FilterMode, MaterialFromShader, mul, RenderTexture, Shader, shaderProp, Texture, Texture2D, TextureResizing, vec2, vec4, WrapMode, ZograRenderer, TextureFormat } from \"@sardinefish/zogra-renderer\";\r\nimport vert from \"./shader/2d-vert.glsl\";\r\nimport frag from \"./shader/blur.glsl\";\r\n\r\nclass MaterialBlur extends MaterialFromShader(new Shader(vert, frag))\r\n{\r\n    @shaderProp(\"uMainTex\", \"tex2d\")\r\n    texture: Texture | null = null;\r\n\r\n    @shaderProp(\"uTexSize\", \"vec4\")\r\n    textureSize: vec4 = vec4.one();\r\n\r\n    @shaderProp(\"uSampleOffset\", \"float\")\r\n    sampleOffset: number = 1;\r\n}\r\n\r\nexport class BlurRenderer\r\n{\r\n    renderer: ZograRenderer;\r\n    steps: RenderTexture[] = [];\r\n    mateiralBlur = new MaterialBlur();\r\n\r\n    constructor(renderer: ZograRenderer)\r\n    {\r\n        this.renderer = renderer;\r\n    }\r\n\r\n    init(texture: Texture)\r\n    {\r\n        if (!this.steps[0])\r\n        {\r\n            this.steps[0] = new RenderTexture(texture.width, texture.height, false, texture.format, texture.filterMode);\r\n            this.steps[0].wrapMode = WrapMode.Clamp;\r\n            this.steps[0].updateParameters();\r\n        }\r\n        if (this.steps[0].width !== texture.width || this.steps[0].height !== texture.height)\r\n            this.steps[0].resize(texture.width, texture.height, TextureResizing.Discard);\r\n    }\r\n\r\n    blur(texture: Texture, iteration: number = 4, output = this.steps[0])\r\n    {\r\n        if (!this.steps[0])\r\n            this.steps[0] = new RenderTexture(texture.width, texture.height, false, texture.format, texture.filterMode);   \r\n        output = output || this.steps[0];\r\n\r\n        if (this.steps[0].width !== texture.width || this.steps[0].height !== texture.height)\r\n            this.steps[0].resize(texture.width, texture.height, TextureResizing.Discard);\r\n        \r\n        this.downSample(texture, iteration);\r\n\r\n        return this.upSample(iteration, output);\r\n    }\r\n\r\n    downSample(input: Texture, iteration: number)\r\n    {\r\n        for (let i = 1; i <= iteration; i++)\r\n        {\r\n            const downSize = vec2.floor(div(input.size, vec2(2)));\r\n            if (!this.steps[i])\r\n            {\r\n                this.steps[i] = new RenderTexture(downSize.x, downSize.y, false, TextureFormat.RGBA, FilterMode.Linear);\r\n                this.steps[i].wrapMode = WrapMode.Clamp;\r\n                this.steps[i].updateParameters();\r\n            }\r\n\r\n            const output = this.steps[i];\r\n            if (output.width !== downSize.x || output.height !== downSize.y)\r\n                output.resize(downSize.x, downSize.y, TextureResizing.Discard);\r\n\r\n            this.mateiralBlur.texture = input;\r\n            this.mateiralBlur.textureSize = vec4(input.width, input.height, 1 / input.width, 1 / input.height);\r\n            this.mateiralBlur.sampleOffset = 1;\r\n            this.renderer.blit(input, output, this.mateiralBlur);\r\n            input = output;\r\n        }\r\n    }\r\n\r\n    upSample(iteration: number, finalOutput = this.steps[0])\r\n    {\r\n        let input = this.steps[iteration];\r\n        for (let i = iteration - 1; i >= 0; i--)\r\n        {\r\n            const upSize = mul(input.size, vec2(2));\r\n            if (!this.steps[i])\r\n            {\r\n                this.steps[i] = new RenderTexture(upSize.x, upSize.y, false, TextureFormat.RGBA, FilterMode.Linear);\r\n                this.steps[i].wrapMode = WrapMode.Clamp;\r\n                this.steps[i].updateParameters();\r\n            }\r\n\r\n            const output = i === 0 ? finalOutput : this.steps[i];\r\n\r\n            this.mateiralBlur.texture = input;\r\n            this.mateiralBlur.textureSize = vec4(input.width, input.height, 1 / input.width, 1 / input.height);\r\n            this.mateiralBlur.sampleOffset = 1;\r\n            this.renderer.blit(input, output, this.mateiralBlur);\r\n            input = output;\r\n        }\r\n        return input;\r\n    }\r\n}", "import { distance, mul, Rect, vec2, vec3, Vector2 } from \"@sardinefish/zogra-renderer\";\r\n\r\nexport interface JitterOption<T extends number | vec2 | [number, number]>\r\n{\r\n    base: T;\r\n    jitter: T;\r\n}\r\n\r\nexport function randomJittered<T extends number | vec2>(option: JitterOption<T>): T\r\n{\r\n    if (typeof (option.base) === \"number\")\r\n        return option.base + (option.jitter as number) * (Math.random() * 2 - 1) as T;\r\n    else\r\n    {\r\n        let opt = option as JitterOption<[number, number]>;\r\n        return vec2(\r\n            opt.base[0] + (opt.jitter[0]) * (Math.random() * 2 - 1),\r\n            opt.base[1] + (opt.jitter[1]) * (Math.random() * 2 - 1)\r\n        ) as T;\r\n    }\r\n}\r\nexport function randomInRect(rect: Rect): vec2\r\n{\r\n    return vec2(Math.random(), Math.random()).mul(rect.size).plus(rect.min);\r\n}\r\n\r\n// https://www.shadertoy.com/view/ltB3zD\r\nconst PHI = 1.61803398874989484820459; // \u03A6 = Golden Ratio \r\nfunction fract(x: number)\r\n{\r\n    return x - Math.floor(x);\r\n}\r\n/**\r\n * Generate noise in [-1, 1]\r\n * @param xy Should be non zero integer\r\n * @param seed Non zero integer\r\n */\r\nexport function goldNoise(xy: vec2, seed: number)\r\n{\r\n    return fract(Math.tan(distance(mul(xy, vec2(PHI)), xy) * seed) * xy.x);\r\n}\r\n\r\nexport function tentNoise(t: number, seed: number)\r\n{\r\n    let frac = fract(t);\r\n    let grid = Math.floor(t += seed);\r\n}\r\n\r\n/**\r\n * Get random value in (-1, 1)\r\n */\r\nexport function random()\r\n{\r\n    return Math.random() * 2 - 1;\r\n}\r\n\r\nexport function randomRange(min: number, max: number)\r\n{\r\n    return Math.random() * (max - min) + min;\r\n}", "import { div, mul, plus, vec2, Vector2 } from \"@sardinefish/zogra-renderer\";\r\nimport { random, randomRange } from \"./random\";\r\nimport { CollisionGrid, RaindropSimulator } from \"./simulator\";\r\nimport { lerp, Time } from \"./utils\";\r\n\r\nexport class RainDrop\r\n{\r\n    pos: vec2;\r\n    density: number = 1;\r\n    velocity: vec2 = vec2.zero();\r\n    spread: vec2;\r\n    destroied = false;\r\n    parent?: RainDrop;\r\n    grid?: CollisionGrid;\r\n    gridIdx?: number;\r\n\r\n    private _mass: number = 0;\r\n    private _size: vec2 = vec2.zero();\r\n    private simulator: RaindropSimulator;\r\n    private resistance = 0;\r\n    private shifting = 0;\r\n    private lastTrailPos: vec2;\r\n    private nextTrailDistance: number;\r\n\r\n    private nextRandomTime = 0;\r\n\r\n    constructor(simulator: RaindropSimulator, pos: vec2, size: number, density = 1)\r\n    {\r\n        this.pos = pos;\r\n        this.simulator = simulator;\r\n        this.density = density;\r\n\r\n        this.lastTrailPos = pos.clone();\r\n        this.nextTrailDistance = randomRange(...simulator.options.trailDistance);\r\n\r\n        this.spread = vec2(simulator.options.initialSpread);\r\n\r\n        this.mass = (size * density) ** 2;\r\n    }\r\n\r\n    get mass() { return this._mass; }\r\n    set mass(m: number)\r\n    {\r\n        this._mass = m;\r\n        const sqrtM = Math.sqrt(m) / this.density;\r\n        this._size.x = (this.spread.x + 1) * sqrtM;\r\n        this._size.y = (this.spread.y + 1) * sqrtM;\r\n        // this._size = mul(plus(this.spread, vec2.one()), Math.sqrt(m));\r\n    }\r\n    \r\n    get size(): vec2\r\n    {\r\n        return this._size;\r\n    }\r\n\r\n    get mergeDistance()\r\n    {\r\n        return this.size.x * (1 + this.spread.x) * 0.16 * this.simulator.options.colliderSize;\r\n    }\r\n\r\n    get options() { return this.simulator.options }\r\n\r\n    updateRaindrop(time: Time)\r\n    {\r\n        if (this.nextRandomTime <= time.total)\r\n        {\r\n            this.nextRandomTime = time.total + randomRange(...this.simulator.options.motionInterval)\r\n            this.randomMotion();\r\n        }\r\n\r\n        this.mass -= this.simulator.options.evaporate * time.dt;\r\n        const force = this.options.gravity * this.mass - this.resistance;\r\n        const acceleration = force / this.mass;\r\n        this.velocity.y -= acceleration * time.dt;\r\n        if (this.velocity.y > 0)\r\n            this.velocity.y = 0;\r\n        this.velocity.x = Math.abs(this.velocity.y) * this.shifting;\r\n        this.pos.x += this.velocity.x * time.dt;\r\n        this.pos.y += this.velocity.y * time.dt;\r\n        // this.pos.plus(mul(this.velocity, vec2(time.dt)));\r\n\r\n        const spreadByVelocity = this.simulator.options.velocitySpread * 2 * Math.atan(Math.abs(this.velocity.y * 0.005)) / Math.PI;\r\n        this.spread.y = Math.max(this.spread.y, spreadByVelocity);\r\n        this.spread.x *= Math.pow(this.simulator.options.shrinkRate, time.dt);\r\n        this.spread.y *= Math.pow(this.simulator.options.shrinkRate, time.dt);\r\n        // this.spread.y +=  Math.abs(this.velocity.y) * 0.0001;\r\n\r\n        if (Vector2.distanceSquared(this.lastTrailPos, this.pos) > this.nextTrailDistance * this.nextTrailDistance)\r\n        {\r\n            this.split();\r\n        }\r\n    }\r\n\r\n    split()\r\n    {\r\n        // return;\r\n        if (this.mass < 1000)\r\n            return;\r\n        let size = this.size.x * randomRange(...this.simulator.options.trailDropSize);\r\n        const pos = plus(vec2(randomRange(-5, 5), this.size.y / 4), this.pos);\r\n        let trailDrop = this.simulator.spawner.spawn(pos.clone(), size, this.simulator.options.trailDropDensity);\r\n        trailDrop.spread = vec2(0.1, Math.abs(this.velocity.y) * 0.01 * this.options.trailSpread);\r\n        trailDrop.parent = this;\r\n        this.mass -= trailDrop.mass;\r\n        this.simulator.add(trailDrop);\r\n        this.lastTrailPos = this.pos.clone();\r\n        this.nextTrailDistance = randomRange(...this.simulator.options.trailDistance);\r\n    }\r\n\r\n    randomMotion()\r\n    {\r\n        const maxResistance = lerp(...this.simulator.options.spawnSize, 1 - this.simulator.options.slipRate) ** 2 * 4;\r\n        this.resistance = randomRange(0, 1) * this.options.gravity * maxResistance;\r\n        this.shifting = random() * randomRange(...this.simulator.options.xShifting);\r\n    }\r\n\r\n    merge(target: RainDrop)\r\n    {\r\n        const selfMomentum = mul(this.velocity, this.mass);\r\n        const targetMomentum = mul(target.velocity, target.mass);\r\n        const momentum = plus(selfMomentum, targetMomentum);\r\n        this.mass += target.mass;\r\n        this.velocity = div(momentum, this.mass);\r\n    }\r\n}", "export interface Time\r\n{\r\n    dt: number,\r\n    total: number,\r\n}\r\n\r\nexport function clamp(x: number, l: number, h: number)\r\n{\r\n    return Math.min(Math.max(x, l), h);\r\n}\r\n\r\nexport function lerp(a: number, b: number, t: number)\r\n{\r\n    return a + (b - a) * t;\r\n}", "import { Rect, vec2 } from \"@sardinefish/zogra-renderer\";\r\nimport { RainDrop } from \"./raindrop\";\r\nimport { randomJittered, JitterOption, randomInRect, randomRange } from \"./random\";\r\nimport { RaindropSimulator, SimulatorOptions } from \"./simulator\";\r\n\r\nexport class Spawner\r\n{\r\n\r\n\r\n    currentTime = 0;\r\n    nextSpawn = 0;\r\n\r\n    private simulator: RaindropSimulator;\r\n\r\n    constructor(simulator: RaindropSimulator, options: SimulatorOptions)\r\n    {\r\n\r\n        this.simulator = simulator;\r\n    }\r\n    \r\n    get interval() { return this.simulator.options.spawnInterval }\r\n    get size() { return this.simulator.options.spawnSize }\r\n    get spawnRect() { return this.simulator.options.viewport }\r\n\r\n    update(dt: number): this\r\n    {\r\n        this.currentTime += dt;\r\n        return this;\r\n    }\r\n    *trySpawn(): Iterable<RainDrop>\r\n    {\r\n        while (this.currentTime >= this.nextSpawn)\r\n        {\r\n            const size = randomRange(...this.size);\r\n            const pos = randomInRect(this.spawnRect);\r\n            this.nextSpawn += randomRange(...this.interval);\r\n            yield new RainDrop(this.simulator, pos, size);\r\n        }\r\n        if (this.currentTime >= this.nextSpawn)\r\n        {\r\n\r\n        }\r\n        return undefined;\r\n    }\r\n    spawn(pos: vec2, size: number, density = 1)\r\n    {\r\n        return new RainDrop(this.simulator, pos, size, density);\r\n    }\r\n}", "import { minus, Rect, vec2 } from \"@sardinefish/zogra-renderer\";\r\nimport { RainDrop } from \"./raindrop\";\r\nimport { JitterOption } from \"./random\";\r\nimport { Spawner } from \"./spawner\";\r\nimport { Time } from \"./utils\";\r\n\r\nexport interface SimulatorOptions\r\n{\r\n    viewport: Rect;\r\n    /**\r\n     * Time range between two raindrop spwan.\r\n     */\r\n    spawnInterval: [number, number];\r\n    /**\r\n     * Random size range when spawn a new raindrop\r\n     */\r\n    spawnSize: [number, number];\r\n    /**\r\n     * Maximal amount of spawned raindrops.\r\n     * Recommend less than 2000\r\n     */\r\n    spawnLimit: number;\r\n    /**\r\n     * Recommend in range (0..1), other value should be ok.\r\n     */\r\n    slipRate: number;\r\n    /**\r\n     * Describe how often a raindrop change its motion state\r\n     */\r\n    motionInterval: [number, number];\r\n    /**\r\n     * Random velociy x relative to velocity y. Recommend in range (0..0.1)\r\n     */\r\n    xShifting: [number, number];\r\n    /**\r\n     * Relative size for collision check. Recommend in range (0.6..1.2)\r\n     */\r\n    colliderSize: number;\r\n    /**\r\n     * Mass density of the slipping trail raindrop. \r\n     * Recommend in range (0.1..0.3)\r\n     * \r\n     * A large value cause a raindrop quickly lose its size during slipping.\r\n     */\r\n    trailDropDensity: number;\r\n    /**\r\n     * Random size range of slipping trail drop. Recommend in range (0.3..0.5)\r\n     */\r\n    trailDropSize: [number, number];\r\n    /**\r\n     * Random distance range between two slipping trail drop. Recommend in range (20..40)\r\n     */\r\n    trailDistance: [number, number];\r\n    /**\r\n     * Vertical spread of a new spawned slipping trail drop. Recommend in range (0.4..0.6)\r\n     */\r\n    trailSpread: number\r\n    /**\r\n     * Spread rate when a new spawned raindrop hit the screen. Recommend in range (0.4..0.7)\r\n     */\r\n    initialSpread: number;\r\n    /**\r\n     * Spread shrink rate per seconds. Recommend in range (0.01..0.02)\r\n     */\r\n    shrinkRate: number;\r\n    /**\r\n     * Spread rate by velocity Y. Recommend in range (0.2..0.4)\r\n     * \r\n     * Raindrop with higher fall speed looks more narrow.\r\n     */\r\n    velocitySpread: number;\r\n    /**\r\n     * Mass lose per second. Recommend in range (10..30)\r\n     */\r\n    evaporate: number;\r\n    /**\r\n     * Gravity acceleration in pixels/s. Recommend 2400\r\n     */\r\n    gravity: number;\r\n}\r\n\r\nexport class CollisionGrid extends Array<RainDrop>\r\n{\r\n    /**@deprecated */\r\n    push(...item :RainDrop[])\r\n    {\r\n        return super.push(...item);\r\n    }\r\n    add(raindrop: RainDrop)\r\n    {\r\n        const len = super.push(raindrop);\r\n        raindrop.gridIdx = len - 1;\r\n        raindrop.grid = this;\r\n    }\r\n    delete(raindrop: RainDrop)\r\n    {\r\n        this[raindrop.gridIdx as number] = this[this.length - 1];\r\n        this[raindrop.gridIdx as number].gridIdx = raindrop.gridIdx;\r\n        this.length--;\r\n        raindrop.gridIdx = -1;\r\n        raindrop.grid = undefined;\r\n    }\r\n}\r\n\r\nexport class RaindropSimulator\r\n{\r\n    options: SimulatorOptions;\r\n    spawner: Spawner;\r\n    raindrops: RainDrop[] = [];\r\n    grid: CollisionGrid[] = [];\r\n    constructor(options: SimulatorOptions)\r\n    {\r\n        this.options = options;\r\n\r\n        this.spawner = new Spawner(this, options);\r\n\r\n        this.resize();\r\n    }\r\n    get gridSize() { return this.options.spawnSize[1] * 0.3 } // max collide distance\r\n\r\n    resize()\r\n    {\r\n        const w = Math.ceil(this.options.viewport.size.x / this.gridSize);\r\n        const h = Math.ceil(this.options.viewport.size.y / this.gridSize);\r\n        let base = 0;\r\n        if (this.grid.length < w * h)\r\n        {\r\n            base = this.grid.length;\r\n            this.grid.length = w * h;\r\n        }\r\n        for (let i = base; i < this.grid.length; i++)\r\n            this.grid[i] = new CollisionGrid();\r\n    }\r\n    gridAt(gridX: number, gridY: number)\r\n    {\r\n        if (gridX < 0 || gridY < 0)\r\n            return undefined;\r\n        const gridWidth = Math.ceil((this.options.viewport.xMax - this.options.viewport.xMin) / this.gridSize);\r\n        const idx = gridY * gridWidth + gridX;\r\n        if (idx >= this.grid.length)\r\n            return undefined;\r\n        return this.grid[idx];\r\n    }\r\n    gridAtWorldPos(x: number, y: number)\r\n    {\r\n        return this.gridAt(...this.worldToGrid(x, y));\r\n    }\r\n    worldToGrid(x: number, y: number): [number, number]\r\n    {\r\n        const gridX = Math.floor(x / this.gridSize);\r\n        const gridY = Math.floor(y / this.gridSize);\r\n        return [gridX, gridY];\r\n    }\r\n    add(raindrop: RainDrop)\r\n    {\r\n\r\n        this.raindrops.push(raindrop);\r\n        let grid = this.gridAtWorldPos(raindrop.pos.x, raindrop.pos.y);\r\n        if (grid)\r\n        {\r\n            grid.add(raindrop);\r\n            raindrop.gridIdx = grid.length - 1;\r\n        }\r\n    }\r\n\r\n    update(time: Time)\r\n    {\r\n        if (this.raindrops.length <= this.options.spawnLimit)\r\n        {\r\n            for (const newDrop of this.spawner.update(time.dt).trySpawn())\r\n            {\r\n                this.raindrops.push(newDrop); \r\n            }\r\n        }\r\n\r\n        this.raindropUpdate(time);\r\n        this.collisionUpdate();\r\n\r\n        for (let i = 0; i < this.raindrops.length; i++)\r\n        {\r\n            if (this.raindrops[i].destroied)\r\n            {\r\n                this.raindrops[i].grid?.delete(this.raindrops[i]);\r\n                this.raindrops[i] = this.raindrops[this.raindrops.length - 1];\r\n                this.raindrops.length--;\r\n            }\r\n        }\r\n    }\r\n\r\n    raindropUpdate(time: Time)\r\n    {\r\n        for (let i = 0; i < this.raindrops.length; i++)\r\n        {\r\n            const raindrop = this.raindrops[i];\r\n            if (raindrop.destroied)\r\n                continue;\r\n            \r\n            raindrop.updateRaindrop(time);\r\n            if (raindrop.pos.y < -100)\r\n                raindrop.destroied = true;\r\n            \r\n\r\n            if (raindrop.destroied)\r\n                continue;\r\n\r\n\r\n            const [gridX, gridY] = this.worldToGrid(raindrop.pos.x, raindrop.pos.y);\r\n            const grid = this.gridAt(gridX, gridY);\r\n            if (grid !== raindrop.grid)\r\n            {\r\n                raindrop.grid?.delete(raindrop);\r\n                grid?.add(raindrop);\r\n                raindrop.grid = grid;\r\n            }\r\n        }\r\n    }\r\n\r\n    collisionUpdate()\r\n    {\r\n        for (let i = 0; i < this.raindrops.length; i++)\r\n        {\r\n            const raindrop = this.raindrops[i];\r\n\r\n            if (raindrop.destroied)\r\n                continue;\r\n            \r\n            const [gridX, gridY] = this.worldToGrid(raindrop.pos.x, raindrop.pos.y);\r\n\r\n            for (let x = -1; x <= 1; x++)\r\n            {\r\n                for (let y = -1; y <= 1; y++)\r\n                {\r\n                    const grid = this.gridAt(gridX + x, gridY + y);\r\n                    if (!grid)\r\n                        continue;\r\n\r\n                    for (const other of grid)\r\n                    {\r\n                        const isSame = other === raindrop;\r\n                        const isParent = other.parent === raindrop || raindrop.parent === other;\r\n                        const isAdjacent = raindrop.parent && (raindrop.parent === other.parent);\r\n                        if (other.destroied || isParent || isAdjacent || isSame)\r\n                            continue;\r\n\r\n                        let dx = raindrop.pos.x - other.pos.x;\r\n                        let dy = raindrop.pos.y - other.pos.y;\r\n                        let distance = Math.sqrt(dx * dx + dy * dy);\r\n                        if (distance - raindrop.mergeDistance - other.mergeDistance < 0)\r\n                        {\r\n                            if (raindrop.mass >= other.mass)\r\n                            {\r\n                                raindrop.merge(other);\r\n                                other.destroied = true;\r\n                            }\r\n                            else\r\n                            {\r\n                                other.merge(raindrop);\r\n                                raindrop.destroied = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["_a"]
}
